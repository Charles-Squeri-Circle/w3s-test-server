openapi: 3.0.3
info:
  title: W3S
  description: All W3S APIs
  version: '1.0'
servers:
  - url: https://api.circle.com/v1/w3s
security:
  - BearerAuth: []
tags:
  - name: Monitor Tokens
  - name: Developer Account
  - name: Wallet Sets
  - name: Wallets
  - name: Transactions
  - name: Token Lookup
  - name: Signing
  - name: Users and Pins
  - name: Deploy / Import
  - name: Interact
  - name: View / Update
  - name: Templates
paths:
  /config/entity/monitoredTokens:
    post:
      tags:
        - Monitor Tokens
      summary: Set monitored tokens
      description: Add a new token to the monitored token list.
      operationId: createMonitoredTokens
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostMonitoredTokensRequest'
        description: Request body
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PostMonitoredTokensResponse'
          description: Success and no update happened
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PostMonitoredTokensResponse'
          description: Success and updated
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
    get:
      tags:
        - Monitor Tokens
      summary: Retreive existing monitored tokens.
      description: Get monitored tokens
      operationId: listMonitoredTokens
      parameters:
        - $ref: '#/components/parameters/Blockchain'
        - name: tokenAddress
          in: query
          schema:
            type: string
        - name: symbol
          in: query
          schema:
            type: string
        - $ref: '#/components/parameters/parameters_From'
        - $ref: '#/components/parameters/parameters_To'
        - $ref: '#/components/parameters/parameters_PageBefore'
        - $ref: '#/components/parameters/parameters_PageAfter'
        - $ref: '#/components/parameters/parameters_PageSize'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/Status'
                      data:
                        $ref: '#/components/schemas/GetMonitoredTokensResponse'
          description: OK
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
    put:
      tags:
        - Monitor Tokens
      summary: Update monitored tokens
      description: Edit the monitored token list.
      operationId: updateMonitoredTokens
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutMonitoredTokensRequest'
        description: Request body
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PutMonitoredTokensResponse'
          description: Success response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /config/entity/monitoredTokens/scope:
    put:
      tags:
        - Monitor Tokens
      summary: Update monitored tokens scope
      description: Select between monitoring all tokens or selected tokens added to the monitored tokens list.
      operationId: updateMonitoredTokensScope
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutMonitoredTokensScopeRequest'
        description: Request body
        required: true
      responses:
        '200':
          content: {}
          description: Success response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /config/entity/monitoredTokens/delete:
    post:
      tags:
        - Monitor Tokens
      summary: Delete monitored tokens
      description: Delete tokens from the monitored token list.
      operationId: deleteMonitoredTokens
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMonitoredTokensRequest'
        description: Request body
        required: true
      responses:
        '200':
          content: {}
          description: Success response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /config/entity/publicKey:
    get:
      tags:
        - Developer Account
      summary: Get public key for entity
      description: Get the public key associated with the entity.
      operationId: getPublicKey
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetPublicKeyResponse'
          description: Success
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /config/entity:
    get:
      tags:
        - Developer Account
      summary: Get configuration for entity
      description: Get the app ID associated to the entity.
      operationId: getEntityConfig
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetEntityConfigResponse'
          description: Success
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /developer/walletSets:
    post:
      tags:
        - Wallet Sets
      summary: Create a new wallet set
      description: Generate a developer controlled wallet set.
      operationId: createWalletSet
      requestBody:
        required: true
        description: WalletSet creation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeveloperWalletSetRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CreateDeveloperWalletSetResponse'
          description: WalletSet already exists
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDeveloperWalletSetResponse'
          description: WalletSet created
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /developer/walletSets/{id}:
    put:
      tags:
        - Wallet Sets
      summary: Update a wallet set
      description: Update the wallet set associated with the given wallet set ID.
      operationId: updateWalletSet
      parameters:
        - $ref: '#/components/parameters/WalletSetIdPath'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWalletSetMetadataRequest'
        description: Update walletSet metadata request
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UpdateWalletSetMetadataResponse'
          description: WalletSet metadata updated
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /walletSets:
    get:
      tags:
        - Wallet Sets
      summary: List wallet sets
      description: Retreive a list of all wallet sets.
      operationId: listWalletSets
      parameters:
        - $ref: '#/components/parameters/parameters_From'
        - $ref: '#/components/parameters/parameters_To'
        - $ref: '#/components/parameters/parameters_PageBefore'
        - $ref: '#/components/parameters/parameters_PageAfter'
        - $ref: '#/components/parameters/parameters_PageSize'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetWalletSetsResponse'
          description: WalletSets found
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
            Link:
              description: 'Pagination cursor information, it can have four links depending on the page: self, first, next and prev. format: <https://api.circle.com/w3s/walletSets?to=2020-06-02T12:01:00Z&pageSize=50>; rel=\"next\'
              schema:
                type: string
        default:
          $ref: '#/components/responses/Default'
  /walletSets/{id}:
    get:
      tags:
        - Wallet Sets
      summary: Get a wallet set
      description: Retreive info for a single wallet set.
      operationId: getWalletSet
      parameters:
        - $ref: '#/components/parameters/WalletSetIdPath'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetWalletSetByIDResponse'
          description: WalletSet found
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /developer/wallets:
    post:
      tags:
        - Wallets
      summary: Create wallets
      description: Generates a new developer-controlled wallet or batch of wallets within a wallet set, specifying blockchain and wallet name.
      operationId: createDeveloperWallet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeveloperWalletRequest'
        description: Wallets creation request
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CreateDeveloperWalletResponse'
          description: Wallets created
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /wallets:
    get:
      tags:
        - Wallets
      summary: List wallets
      description: Retrieves a list of all developer-controlled wallets that fit the specified parameters.
      operationId: listWallets
      parameters:
        - $ref: '#/components/parameters/XUserToken'
        - $ref: '#/components/parameters/Address'
        - $ref: '#/components/parameters/Blockchain'
        - $ref: '#/components/parameters/WalletSetIdQuery'
        - $ref: '#/components/parameters/parameters_From'
        - $ref: '#/components/parameters/parameters_To'
        - $ref: '#/components/parameters/parameters_PageBefore'
        - $ref: '#/components/parameters/parameters_PageAfter'
        - $ref: '#/components/parameters/parameters_PageSize'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ExtGetAllWalletsResponse'
          description: Wallets found
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
            Link:
              description: 'Pagination cursor information, it can have four links depending on the page: self, first, next and prev. format: <https://api.circle.com/w3s/wallets?to=2020-06-02T12:01:00Z&pageSize=50>; rel=\"next\'
              schema:
                type: string
        default:
          $ref: '#/components/responses/Default'
  /wallets/{id}:
    get:
      tags:
        - Wallets
      summary: Get a wallet
      description: Retrieves info for a single developer-controlled wallet using it's unique identifier.
      operationId: getWallet
      parameters:
        - name: id
          description: Wallet ID
          in: path
          required: true
          schema:
            format: uuid
            type: string
        - $ref: '#/components/parameters/XUserToken'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ExtGetWalletByIDResponse'
          description: Wallet found
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
    put:
      tags:
        - Wallets
      summary: Update a wallet
      description: Updates info for a single developer-controlled wallet using it's unique identifier.
      operationId: updateWallet
      parameters:
        - name: id
          description: Wallet ID
          in: path
          required: true
          schema:
            format: uuid
            type: string
        - $ref: '#/components/parameters/XUserToken'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtUpdateWalletMetadataRequest'
        description: Wallet metadata update request
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ExtWalletResponse'
          description: Wallet metadata updated
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /wallets/{id}/balances:
    get:
      tags:
        - Wallets
      summary: Get token balance for a wallet
      description: Fetches the digital asset balance for a single developer-controlled wallet using its unique identifier.
      operationId: listWalletBallance
      parameters:
        - description: Wallet ID
          in: path
          name: id
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/XUserToken'
        - $ref: '#/components/parameters/IncludeAll'
        - $ref: '#/components/parameters/Name'
        - $ref: '#/components/parameters/TokenAddress'
        - $ref: '#/components/parameters/Standard'
        - $ref: '#/components/parameters/parameters_From'
        - $ref: '#/components/parameters/parameters_To'
        - $ref: '#/components/parameters/parameters_PageBefore'
        - $ref: '#/components/parameters/parameters_PageAfter'
        - $ref: '#/components/parameters/parameters_PageSize'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetBalancesResponse'
          description: Success
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /wallets/{id}/nfts:
    get:
      tags:
        - Wallets
      summary: Get NFTs for a wallet
      description: Fetches the info for all NFTs stored in a single developer-controlled wallet, using the wallets unique identifier.
      operationId: listWalletNfts
      parameters:
        - description: Wallet ID
          in: path
          name: id
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/XUserToken'
        - $ref: '#/components/parameters/IncludeAll'
        - $ref: '#/components/parameters/Name'
        - $ref: '#/components/parameters/TokenAddress'
        - $ref: '#/components/parameters/Standard'
        - $ref: '#/components/parameters/parameters_From'
        - $ref: '#/components/parameters/parameters_To'
        - $ref: '#/components/parameters/parameters_PageBefore'
        - $ref: '#/components/parameters/parameters_PageAfter'
        - $ref: '#/components/parameters/parameters_PageSize'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetNftsResponse'
          description: Success
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /developer/transactions/transfer:
    post:
      tags:
        - Transactions
      summary: Create a transfer transaction
      description: Initiates an on-chain digital asset transfer from a specified developer-controlled wallet.
      operationId: createDeveloperTransactionTransfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransferTransactionForDeveloperRequest'
        description: Create transaction for developer request
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CreateTransferTransactionForDeveloperResponse'
          description: OK
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /developer/transactions/{id}/accelerate:
    post:
      tags:
        - Transactions
      summary: Accelerate a transaction
      description: Accelerates a specified on-chain digital asset transfer from a developer-controlled wallet. Additional gas fees may be incurred.
      operationId: createDeveloperTransactionAccelerate
      parameters:
        - name: id
          description: Transaction ID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccelerateTransactionForDeveloperRequest'
        description: Accelerate transaction for developer request
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AccelerateTransactionForDeveloperResponse'
          description: Transaction accelerated
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /developer/transactions/{id}/cancel:
    post:
      tags:
        - Transactions
      summary: Cancel a transaction
      description: Cancels a specified on-chain digital asset transfer from a developer-controlled wallet. Gas fees may still be incurred.
      operationId: createDeveloperTransactionCancel
      parameters:
        - name: id
          description: Transaction ID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Cancel transaction for developer request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelTransactionForDeveloperRequest'
      responses:
        '200':
          description: Transaction canceled
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CancelTransactionForDeveloperResponse'
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /developer/transactions/contractExecution:
    post:
      tags:
        - Transactions
      summary: Create a contract execution transaction
      description: Creates a transaction which executes a smart contract. ABI parameters must be passed in the request.
      operationId: createDeveloperTransactionContractExecution
      requestBody:
        required: true
        description: Create transaction for developer request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContractExecutionTransactionForDeveloperRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CreateContractExecutionTransactionForDeveloperResponse'
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /transactions:
    get:
      tags:
        - Transactions
      summary: List transactions
      description: Lists all transactions. Includes details such as status, source/destination, and transaction hash.
      operationId: listTransactions
      parameters:
        - $ref: '#/components/parameters/XUserToken'
        - $ref: '#/components/parameters/Blockchain'
        - $ref: '#/components/parameters/CustodyType'
        - $ref: '#/components/parameters/DestinationAddress'
        - $ref: '#/components/parameters/IncludeAll'
        - $ref: '#/components/parameters/Operation'
        - $ref: '#/components/parameters/State'
        - $ref: '#/components/parameters/TxHash'
        - $ref: '#/components/parameters/TxType'
        - $ref: '#/components/parameters/WalletIds'
        - $ref: '#/components/parameters/parameters_From'
        - $ref: '#/components/parameters/parameters_To'
        - $ref: '#/components/parameters/parameters_PageBefore'
        - $ref: '#/components/parameters/parameters_PageAfter'
        - $ref: '#/components/parameters/parameters_PageSize'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetTransactionsResponse'
          description: Transactions retrieved
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
            Link:
              description: 'Pagination cursor information. format: <https://api.circle.com/v1/developer/walletSets?to=2020-06-02T12:01:00Z&pageSize=50>; rel=\"next\'
              schema:
                type: string
        default:
          $ref: '#/components/responses/Default'
  /transactions/{id}:
    get:
      tags:
        - Transactions
      summary: Get a transaction
      description: Retrieves info for a single transaction using it's unique identifier.
      operationId: getTransaction
      parameters:
        - name: id
          description: Transaction id
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/XUserToken'
        - $ref: '#/components/parameters/TxType'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetTransactionByIDResponse'
          description: Transaction retrieved
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /transactions/transfer/estimateFee:
    post:
      tags:
        - Transactions
      summary: Estimate fee for a transfer transaction
      description: Estimates gas fees that will be incurred for a transfer transaction; given its amount, blockchain, and token.
      operationId: createTransferEstimateFee
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EstimateTransferTransactionFeeRequest'
        description: Estimate transaction fee request
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EstimateTransactionFeeResponse'
          description: Transaction fee estimated
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /transactions/contractExecution/estimateFee:
    post:
      tags:
        - Transactions
      summary: Estimate fee for a contract execution transaction
      description: Estimates gas fees that will be incurred for a contract execution transaction, given its ABI parameters and blockchain.
      operationId: createTransactionEstimateFee
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EstimateContractExecutionTransactionFeeRequest'
        description: Estimate transaction fee request
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EstimateTransactionFeeResponse'
          description: Transaction fee estimated
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /transactions/validateAddress:
    post:
      tags:
        - Transactions
      summary: Validate an address
      description: Confirms that a specified address is valid for a given token on a certain blockchain.
      operationId: createValidateAddress
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateAddressRequest'
        description: Validate address request
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ValidateAddressResponse'
          description: Address validated
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /developer/sign/message:
    post:
      tags:
        - Signing
      summary: Sign message
      description: 'Sign the EIP-191 message from a specified developer-controlled wallet. Please note that not all the Dapps currently support Smart Contract Account (SCA), the difference between EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types), and you can check the list of Dapps that support SCA: https://eip1271.io/.'
      operationId: signDeveloperMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignMessageForDeveloperRequest'
        description: Sign message for developer request
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SignMessageForDeveloperResponse'
          description: OK
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /developer/sign/typedData:
    post:
      tags:
        - Signing
      summary: Sign typed data
      description: 'Sign the EIP-712 typed structured data from a specified developer-controlled wallet. Please note that not all the Dapps currently support Smart Contract Account (SCA), the difference between EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types), and you can check the list of Dapps that support SCA: https://eip1271.io/.'
      operationId: signDeveloperTypedData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignTypedDataForDeveloperRequest'
        description: Sign message for developer request
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SignTypedDataForDeveloperResponse'
          description: OK
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /tokens/{id}:
    get:
      tags:
        - Token Lookup
      summary: Get token details
      description: Fetches details of a specific token given its unique identifier. Every token in your network of wallets has a UUID associated with it, regardless of whether it's already recognized or was added as a monitored token.
      operationId: getTokenId
      parameters:
        - name: id
          description: Token ID
          in: path
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetTokenByIDResponse'
          description: Token found
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /users:
    post:
      tags:
        - Users and Pins
      summary: Create a user
      description: Create a user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        description: Request body
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: Success response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
    get:
      tags:
        - Users and Pins
      summary: List users
      description: Get all the users under the entity, sorted by the create date DESC order.
      operationId: listUsers
      parameters:
        - $ref: '#/components/parameters/PinStatus'
        - $ref: '#/components/parameters/SecurityQuestionStatus'
        - $ref: '#/components/parameters/parameters_From'
        - $ref: '#/components/parameters/parameters_To'
        - $ref: '#/components/parameters/parameters_PageBefore'
        - $ref: '#/components/parameters/parameters_PageAfter'
        - $ref: '#/components/parameters/parameters_PageSize'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ExtGetAllEndUsersResponse'
          description: Users retrieved
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
            Link:
              description: 'Pagination cursor information, it can have four links depending on the page: self, first, next and prev. format: <https://api.circle.com/w3s/users?to=2020-06-02T12:01:00Z&pageSize=50>; rel=\"next\'
              schema:
                type: string
        default:
          $ref: '#/components/responses/Default'
  /users/{id}:
    get:
      summary: Get a user
      tags:
        - Users and Pins
      description: Get user by ID.
      operationId: getUser
      parameters:
        - name: id
          description: User ID
          in: path
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetEndUserByIDResponse'
          description: Success response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /users/token:
    post:
      tags:
        - Users and Pins
      summary: Create a user token
      description: Generate user session and SDK secret key.
      operationId: getUserToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateUserTokenRequest'
        description: Request body
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GenerateUserTokenResponse'
          description: Success response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /user:
    get:
      tags:
        - Users and Pins
      summary: Get user status
      description: Get user's PIN and Security Question statuses.
      operationId: getUserByToken
      parameters:
        - $ref: '#/components/parameters/XUserTokenRequired'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EndUser'
          description: Success response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /user/initialize:
    post:
      tags:
        - Users and Pins
      summary: Create a challenge for PIN setup and create wallet(s)
      description: Create a challenge for PIN setup and create wallet(s)
      operationId: createUserWithPinChallenge
      parameters:
        - $ref: '#/components/parameters/XUserTokenRequired'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPinAndInitWalletRequest'
        description: Request body
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SetPinResponse'
          description: Success response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /user/challenges:
    get:
      tags:
        - Users and Pins
      summary: List challenges
      description: List all challenges by status for a user.
      operationId: listUserChallenges
      parameters:
        - $ref: '#/components/parameters/XUserTokenRequired'
        - $ref: '#/components/parameters/Status'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetEndUserChallengesResponse'
          description: Success response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /user/challenges/{id}:
    get:
      tags:
        - Users and Pins
      summary: Get a challenge
      description: Get the status of a challenge.
      operationId: getUserChallenge
      parameters:
        - $ref: '#/components/parameters/XUserTokenRequired'
        - name: id
          description: ExtChallenge id to query
          in: path
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetEndUserChallengeByIDResponse'
          description: Success response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /user/pin:
    post:
      tags:
        - Users and Pins
      summary: Create a challenge for PIN setup
      description: Create a challenge for PIN setup without setting up wallets.
      operationId: createUserPinChallenge
      parameters:
        - $ref: '#/components/parameters/XUserTokenRequired'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPinRequest'
        description: Request body
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SetPinResponse'
          description: Success response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
    put:
      tags:
        - Users and Pins
      summary: Create a challenge to update PIN
      description: Create a challenge to update a user's PIN via existing PIN.
      operationId: updateUserPinChallenge
      parameters:
        - $ref: '#/components/parameters/XUserTokenRequired'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePinRequest'
        description: Request body
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ChangePinResponse'
          description: Success response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /user/pin/restore:
    post:
      tags:
        - Users and Pins
      summary: Create a challenge for PIN restore
      description: Create a challenge to change a user's PIN via Security Questions.
      operationId: createUserPinRestoreChallenge
      parameters:
        - $ref: '#/components/parameters/XUserTokenRequired'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestorePinRequest'
        description: Request body
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RestorePinResponse'
          description: Success response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /user/wallets:
    post:
      tags:
        - Wallets
      summary: Create wallets
      description: Generates a challenge for creating a new user-controlled wallet or batch of wallets, specifying blockchain and wallet name.
      operationId: createUserWallet
      parameters:
        - $ref: '#/components/parameters/XUserTokenRequired'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEndUserWalletRequest'
        description: walletResponse creation request
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CreateEndUserWalletResponse'
          description: walletResponse already exists
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /user/transactions/transfer:
    post:
      tags:
        - Transactions
      summary: Create a challenge for a transfer
      description: Generates a challenge for initiating an on-chain digital asset transfer from a specified user-controlled wallet
      operationId: createUserTransactionTransferChallenge
      parameters:
        - $ref: '#/components/parameters/XUserTokenRequired'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransferTransactionForEndUserRequest'
        description: Create transaction for end user request
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CreateTransferTransactionForEndUserResponse'
          description: OK
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /user/transactions/{id}/accelerate:
    post:
      tags:
        - Transactions
      summary: Create a Challenge to accelerate a transaction
      description: Generates a challenge for accelerating a specified on-chain digital asset transfer from a user-controlled wallet. Additional gas fees may be incurred.
      operationId: createUserTransactionAccelerateChallenge
      parameters:
        - name: id
          description: Transaction ID
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/XUserTokenRequired'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccelerateTransactionForEndUserRequest'
        description: Accelerate transaction for end user request
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AccelerateTransactionForEndUserResponse'
          description: Transaction accelerated
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /user/transactions/{id}/cancel:
    post:
      tags:
        - Transactions
      summary: Create a challenge to cancel a transaction
      description: Generates a challenge for cancelling a specified on-chain digital asset transfer from a user-controlled wallet. Gas fees may still be incurred.
      operationId: createUserTransactionCancelChallenge
      parameters:
        - name: id
          description: Transaction ID
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/XUserTokenRequired'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelTransactionForEndUserRequest'
        description: Cancel transaction for end user request
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CancelTransactionForEndUserResponse'
          description: Transaction cancelled
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /user/transactions/contractExecution:
    post:
      tags:
        - Transactions
      summary: Create a challenge for contract execution
      description: Generates a challenge for creating a transaction which executes a smart contract. ABI parameters must be passed in the request.
      operationId: createUserTransactionContractExecutionChallenge
      parameters:
        - $ref: '#/components/parameters/XUserTokenRequired'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractExecutionTxnPinCodeRequest'
        description: Create transaction for end user request
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CreateContractExecutionTransactionForEndUserResponse'
          description: OK
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /user/sign/message:
    post:
      tags:
        - Signing
      summary: Create a challenge to sign message
      description: 'Generates a challenge for signing the EIP-191 message from a specified user-controlled wallet. Please note that not all the Dapps currently support Smart Contract Account (SCA), the difference between EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types), and you can check the list of Dapps that support SCA: https://eip1271.io/.'
      operationId: signUserMessage
      parameters:
        - $ref: '#/components/parameters/XUserTokenRequired'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignMessageForEndUserRequest'
        description: Sign message for end user request
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SignMessageForEndUserResponse'
          description: Signature already exists
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignMessageForEndUserResponse'
          description: Signature created
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /user/sign/typedData:
    post:
      tags:
        - Signing
      summary: Create a challenge to sign typed data
      description: 'Generates a challenge for signing the EIP-712 typed structured data from a specified user-controlled wallet. Please note that not all the Dapps currently support Smart Contract Account (SCA), the difference between EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types), and you can check the list of Dapps that support SCA: https://eip1271.io/.'
      operationId: signUserTypedData
      parameters:
        - $ref: '#/components/parameters/XUserTokenRequired'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignTypedDataForEndUserRequest'
        description: Sign typed data for end user request
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SignTypedDataForEndUserResponse'
          description: Signature already exists
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignTypedDataForEndUserResponse'
          description: Signature created
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          $ref: '#/components/responses/Default'
  /contracts/import:
    post:
      tags:
        - Deploy / Import
      summary: Import a contract
      description: Add an existing smart contract to your library of contracts. It also can be done in the Web3 Services Console.
      operationId: importContract
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/scp-schemas_ImportContractRequest'
        description: Import contract request
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/scp-schemas_ContractResponse'
          description: Idempotent request. Contract already imported
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        '201':
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/scp-schemas_ContractResponse'
          description: Contract imported
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
  /contracts/deploy:
    post:
      tags:
        - Deploy / Import
      summary: Deploy a contract
      description: Deploy a smart contract on a specified blockchain using the contract's ABI and bytecode. The deployment will originate from one of your Circle Programmable Wallets.
      operationId: deployContract
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/scp-schemas_ContractDeploymentRequest'
            examples:
              Wallet ID:
                value:
                  idempotencyKey: a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
                  name: First Contract
                  description: My first hello world contract
                  walletId: 004735f6-d9fc-44f8-933c-672cdf3d240d
                  abiJson: "[\n\t{\n\t\t\"inputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"constructor\"\n\t},\n\t..."
                  bytecode: 0x60806040523480156200001157600080fd5b50604051806040...
                  constructorParameters:
                    - TICK
                    - 10000
                  feeLevel: MEDIUM
                  entitySecretCiphertext: 0NtD3d3+nmgb4GqYQXzAjKF8h5Zq6sHM2k/7UQz5OIXWnU7H8O9XvVYXqDnw1wEmY...
        description: Deploy contract request
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/scp-schemas_ContractDeploymentResponse'
          description: Idempotent request. Contract deployment request already submitted
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        '201':
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/scp-schemas_ContractDeploymentResponse'
          description: 'New contract deployed '
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
  /contracts/deploy/estimateFee:
    post:
      tags:
        - Deploy / Import
      summary: Estimate a contract deployment
      description: Estimate the network fee for deploying a smart contract on a specified blockchain, given the contract bytecode.
      operationId: estimateContractDeploy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/scp-schemas_ContractDeploymentEstimateFeeRequest'
            examples:
              Wallet ID:
                value:
                  walletId: 004735f6-d9fc-44f8-933c-672cdf3d240d
                  bytecode: 0x60806040523480156200001157600080fd5b50604051806040...
                  constructorSignature: constructor(string, uint256)
                  constructorParameters:
                    - TICK
                    - 10000
              Source Address:
                value:
                  sourceAddress: '0x1bf9ad0cc2ad298c69a2995aa806ee832788218c'
                  blockchain: MATIC-MUMBAI
                  bytecode: 0x60806040523480156200001157600080fd5b50604051806040...
                  constructorSignature: constructor(string ticker, uint256 totalSupply)
                  constructorParameters:
                    - TICK
                    - 10000
        description: Estimate a transaction fee for deploying a smart contract
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/scp-schemas_ContractDeploymentEstimateFeeResponse'
          description: OK
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
  /contracts/{id}/read:
    post:
      tags:
        - Interact
      summary: Execute a read function on a contract
      description: Read the state of a contract you've imported or deployed by providing the ABI function and applicable parameters.
      operationId: readContract
      parameters:
        - description: Contract id
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/scp-schemas_ReadContractStateRequest'
        description: Read contract state by executing a read ABI function.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/scp-schemas_ReadContractStateResponse'
          description: OK
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
  /contracts:
    get:
      tags:
        - View / Update
      summary: List contracts
      description: Fetch a list of contracts that you've imported and/or deployed.
      operationId: listContracts
      parameters:
        - name: blockchain
          description: Filter by blockchain.
          in: query
          schema:
            type: string
            enum:
              - ETH
              - ETH-GOERLI
              - MATIC
              - MATIC-MUMBAI
        - name: contractInputType
          description: Filter contracts by input type.
          in: query
          schema:
            type: string
            enum:
              - IMPORT
              - BYTECODE
        - name: deployerAddress
          description: Filter contracts by deployer address.
          in: query
          schema:
            type: string
        - name: name
          description: Filter contracts by name.
          in: query
          schema:
            type: string
        - name: status
          description: Filter contracts by status.
          in: query
          schema:
            type: string
            enum:
              - PENDING
              - FAILED
              - COMPLETE
        - $ref: '#/components/parameters/parameters_From'
        - $ref: '#/components/parameters/parameters_To'
        - $ref: '#/components/parameters/parameters_PageBefore'
        - $ref: '#/components/parameters/parameters_PageAfter'
        - $ref: '#/components/parameters/parameters_PageSize'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/scp-schemas_ContractsResponse'
          description: Contract list retrieved
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
            Link:
              description: 'Pagination cursor information. format: <https://api.circle.com/v1/contracts?to=2020-06-02T12:01:00Z&pageSize=50>; rel=\"next\'
              schema:
                type: string
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
  /contracts/{id}:
    get:
      tags:
        - View / Update
      summary: Get a contract
      description: Get a single contract that you've imported or deployed. Retrieved using the contracts ID as opposed to the on-chain address.
      operationId: getContract
      parameters:
        - description: Contract id
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/scp-schemas_ContractResponse'
          description: Contract retrieved
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
    patch:
      tags:
        - View / Update
      summary: Update a contract
      description: Update the off-chain properties, such as description, of a contract that you've imported or deployed. Updated using the contracts ID as opposed to the on-chain address.
      operationId: updateContract
      parameters:
        - description: Contract id
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/scp-schemas_PatchContractRequest'
        description: Update contract properties request
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/scp-schemas_ContractResponse'
          description: OK
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
  /templates/{id}/deploy:
    post:
      tags:
        - Templates
      summary: Deploy a contract from a template
      description: Deploy a smart contract using a template.
      operationId: deployContractTemplate
      parameters:
        - description: Template id
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateContractDeploymentRequest'
        description: Deploy contract by template request
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateContractDeploymentResponse'
          description: Contract already created in previous request
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateContractDeploymentResponse'
          description: New contract deployed
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
  /templates/{id}/deploy/estimateFee:
    post:
      tags:
        - Templates
      summary: Estimate fee for a contract template deployment
      description: Estimate the fee required to deploy contract by template.
      operationId: estimateContractTemplateDeploy
      parameters:
        - description: Template id
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EstimateDeployContractByTemplateFeeRequest'
        description: Request object for estimating the transaction fees for deploying a contract from a template.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstimateDeployContractByTemplateFeeResponse'
          description: Response object with estimated transaction fee values.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
components:
  schemas:
    ContractDeploymentEstimateFeeRequest:
      type: object
      required:
        - bytecode
        - constructorParameters
      properties:
        blockchain:
          $ref: '#/components/schemas/commonBlockchain'
        bytecode:
          $ref: '#/components/schemas/Bytecode'
        constructorSignature:
          $ref: '#/components/schemas/ConstructorSignature'
        constructorParameters:
          $ref: '#/components/schemas/ConstructorParameters'
        sourceAddress:
          $ref: '#/components/schemas/SourceAddress'
        walletId:
          $ref: '#/components/schemas/WalletId'
    ContractDeploymentEstimateFeeResponse:
      type: object
      properties:
        high:
          $ref: '#/components/schemas/modelTransactionFee'
        low:
          $ref: '#/components/schemas/modelTransactionFee'
        medium:
          $ref: '#/components/schemas/modelTransactionFee'
    ContractDeploymentRequest:
      type: object
      required:
        - abiJson
        - bytecode
        - entitySecretCiphertext
        - idempotencyKey
        - name
        - constructorParameters
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/schemas_IdempotencyKey'
        name:
          $ref: '#/components/schemas/ContractName'
        description:
          $ref: '#/components/schemas/ContractDescription'
        walletId:
          $ref: '#/components/schemas/WalletId'
        abiJson:
          $ref: '#/components/schemas/AbiJson'
        bytecode:
          $ref: '#/components/schemas/Bytecode'
        entitySecretCiphertext:
          $ref: '#/components/schemas/EntitySecretCiphertext'
        blockchain:
          $ref: '#/components/schemas/commonBlockchain'
        constructorParameters:
          $ref: '#/components/schemas/ConstructorParameters'
        feeLevel:
          $ref: '#/components/schemas/modelFeeLevel'
        gasLimit:
          type: string
          description: GasLimit is the limit on how much gas can be used in the transaction.
        gasPrice:
          type: string
          description: GasPrice is the price per unit of gas for the transaction.
        maxFee:
          type: string
          description: MaxFee is the total amount willing to be paid per unit of gas for your transaction.
        priorityFee:
          type: string
          description: |-
            PriorityFee is an additional fee per unit of gas to incentivise validators to complete your transaction.
            faster.
        refId:
          $ref: '#/components/schemas/RefId'
    ContractDeploymentResponse:
      type: object
      properties:
        contractId:
          type: string
          description: Unique identifier of the created smart contract.
          example: 676f83a8-81a1-4dd5-b738-e2509b8f5460
        transactionId:
          type: string
          description: Unique identifier of the pending deployment transaction.
          example: 36790743-b78d-4061-9558-1af9a9c837bd
    Contract:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/schemas_Id'
        deployerWalletID:
          type: string
          format: uuid
          description: The `id` of the Programmable Wallet that deployed this contract.
          example: f39e3dbd-84af-4d3d-b5ac-98fbe047ce6a
        deploymentTransactionId:
          type: string
          format: uuid
          description: The id of the deployment transaction for this contract.
          example: 00ca46f3-c31b-4e3a-92a9-068d4ff26a63
        implementationContractId:
          type: string
          format: uuid
          description: If this contract is a proxy, the contract ID of the implementation.
          example: f3d81192-1f5d-4d17-ae85-5801a15ea273
        txHash:
          type: string
          description: The string value of the transaction hash.
          example: '0x4a25cc5e661d8504b59c5f38ba93f010e8518966f00e2ceda7955c4b8621357d'
        abiJson:
          $ref: '#/components/schemas/AbiJson'
        archived:
          $ref: '#/components/schemas/Archived'
        blockchain:
          $ref: '#/components/schemas/schemas_Blockchain'
        bytecode:
          $ref: '#/components/schemas/Bytecode'
        contractAddress:
          type: string
          description: The on-chain address of this contract.
          example: '0x1e124d7384cd34448ea5907bd0052a79355ab5eb'
        contractInputType:
          $ref: '#/components/schemas/modelContractInputType'
        deployerAddress:
          type: string
          description: The address that created this contract, if deployed.
          example: '0x1bf9ad0cc2ad298c69a2995aa806ee832788218c'
        name:
          type: string
          description: The contract's name.
          example: First Contract
        description:
          $ref: '#/components/schemas/ContractDescription'
        status:
          $ref: '#/components/schemas/modelStatus'
        verificationStatus:
          $ref: '#/components/schemas/modelVerificationStatus'
        metadataLink:
          type: string
          description: The ipfs metadata link of the contract.
          example: https://ipfs.io/ipfs/Qme7ss3ARVgxv6rXqVPiikMJ8u2NLgmgszg13pYrDKEoiu
        updateDate:
          $ref: '#/components/schemas/UpdateDate'
        createDate:
          $ref: '#/components/schemas/schemas_CreateDate'
        sourceCode:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/modelSolFile'
        functions:
          type: array
          description: Functions supported by this contract. Parsed from abi_json.
          items:
            $ref: '#/components/schemas/modelFunction'
        events:
          type: array
          description: Events this contract can emit. Parsed from abi_json.
          items:
            $ref: '#/components/schemas/modelEvent'
    ContractResponse:
      type: object
      properties:
        contract:
          $ref: '#/components/schemas/Contract'
    ContractsResponse:
      type: object
      properties:
        contracts:
          type: array
          description: Contracts are all the contracts that match criteria.
          items:
            $ref: '#/components/schemas/Contract'
    ImportContractRequest:
      type: object
      required:
        - idempotencyKey
        - name
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/schemas_IdempotencyKey'
        name:
          $ref: '#/components/schemas/ContractName'
        description:
          $ref: '#/components/schemas/ContractDescription'
        address:
          type: string
          description: Address is the address of the contract to be imported.
          example: '0x1e124d7384cd34448ea5907bd0052a79355ab5eb'
        blockchain:
          $ref: '#/components/schemas/commonBlockchain'
    PatchContractRequest:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ContractName'
        description:
          $ref: '#/components/schemas/ContractDescription'
        archived:
          $ref: '#/components/schemas/Archived'
    ReadContractStateRequest:
      type: object
      required:
        - abiParameters
      properties:
        abiFunctionSignature:
          $ref: '#/components/schemas/AbiFunctionSignature'
        abiParameters:
          $ref: '#/components/schemas/AbiParameters'
    ReadContractStateResponse:
      type: object
      properties:
        outputValues:
          type: array
          description: OutputValues is the read ABI function response.
          items:
            $ref: '#/components/schemas/AnyValue'
    commonBlockchain:
      type: string
      description: Blockchain is the blockchain to deploy onto.
      enum:
        - ETH
        - ETH-GOERLI
        - AVAX
        - AVAX-FUJI
        - MATIC
        - MATIC-MUMBAI
      example: MATIC-MUMBAI
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/schemas_IdempotencyKey'
        walletId:
          $ref: '#/components/schemas/WalletId'
        abiFunctionSignature:
          $ref: '#/components/schemas/AbiFunctionSignature'
        entitySecretCiphertext:
          $ref: '#/components/schemas/EntitySecretCiphertext'
        abiParameters:
          $ref: '#/components/schemas/AbiParameters'
        blockchain:
          $ref: '#/components/schemas/commonBlockchain'
        feeLevel:
          $ref: '#/components/schemas/modelFeeLevel'
        gasLimit:
          type: string
          description: GasLimit is the limit on how much gas can be used in the transaction.
        gasPrice:
          type: string
          description: GasPrice is the price of gas for the transaction.
        maxFee:
          type: string
          description: MaxFee is the total amount willing to be paid for your transaction.
        priorityFee:
          type: string
          description: PriorityFee is an additional fee to have your transaction completed faster.
        refId:
          $ref: '#/components/schemas/RefId'
    modelContractInputType:
      type: string
      enum:
        - IMPORT
        - BYTECODE
        - TEMPLATE
    modelEvent:
      type: object
      properties:
        name:
          type: string
          example: Approval
        type:
          type: string
          example: event
        anonymous:
          type: boolean
          example: false
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/modelParamType'
    modelFeeLevel:
      type: string
      enum:
        - LOW
        - MEDIUM
        - HIGH
      description: FeeLevel is the fee level. LOW / MEDIUM / HIGH - Defines the blockchain fee level which will be paid for the transaction.  Optional, but if provided, all other 4 fee related fields (gasLimit, gasPrice, priorityFee and maxFee) should all be null
    modelFunction:
      type: object
      properties:
        name:
          type: string
          example: approve
        stateMutability:
          type: string
          example: nonpayable
        type:
          type: string
          example: function
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/modelParamType'
        outputs:
          type: array
          items:
            $ref: '#/components/schemas/modelParamType'
    modelParamType:
      type: object
      properties:
        components:
          type: array
          items:
            $ref: '#/components/schemas/AnyValue'
        indexed:
          type: boolean
        name:
          type: string
          example: to
        type:
          type: string
          example: address
    modelSolFile:
      type: object
      description: Source code of a contract from Etherscan.
      required:
        - fileContent
      properties:
        fileName:
          type: string
          description: Name of the file.
          example: openzeppelin-solidity/contracts/math/SafeMath.sol
        fileContent:
          type: string
          description: Content of the file. If the contract's source code was flattened before verification, this may be the entire source code.
          example: |-
            pragma solidity ^0.4.24;

            /**
             * @title SafeMath
             * @dev Math operations with safety checks...
    modelStatus:
      type: string
      enum:
        - PENDING
        - FAILED
        - COMPLETE
    modelTransactionFee:
      type: object
      properties:
        baseFee:
          type: string
        gasLimit:
          type: string
        gasPrice:
          type: string
        maxFee:
          type: string
        priorityFee:
          type: string
    modelVerificationStatus:
      type: string
      enum:
        - UNVERIFIED
        - VERIFIED
    Bytecode:
      type: string
      description: Bytecode of the contract being deployed
      minLength: 1
      writeOnly: true
      example: 0x60806040523480156200001157600080fd5b50604051806040...
    ContractName:
      type: string
      description: The contract's name.
      example: First Contract
    ContractDescription:
      type: string
      description: The description for a contract.
      example: My first hello world contract
    AbiJson:
      type: string
      description: The contract's ABI in a JSON stringified format.
      example: "[\n\t{\n\t\t\"inputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"constructor\"\n\t},\n\t..."
    WalletId:
      type: string
      format: uuid
      description: Unique identifier of the wallet that will deploy the contract.
      example: 004735f6-d9fc-44f8-933c-672cdf3d240d
    SourceAddress:
      type: string
      description: The source address of the transaction.
      example: '0x1bf9ad0cc2ad298c69a2995aa806ee832788218c'
    ConstructorParameters:
      type: array
      description: A list of arguments to pass to the contract's constructor function. Must be an empty array if there are no constructor parameters.
      items:
        $ref: '#/components/schemas/AnyValue'
      example:
        - TICK
        - 10000
    ConstructorSignature:
      type: string
      description: Signature of the constructor if the contract has one. constructor() by default.
      maxLength: 1000
      minLength: 1
      example: constructor(string ticker, uint256 totalSupply)
    Archived:
      description: Archived is the updated archived setting of the contract. If true, the contract will not be visible in your dashboard.
      type: boolean
      example: false
    AnyValue:
      description: Can be any value - string, number, boolean, array or object.
    AbiFunctionSignature:
      type: string
      description: AbiFunctionSignature defines the name and parameter types of the ABI function.
      example: safeMint(address, uint256)
    AbiParameters:
      type: array
      description: AbiParameters is the values to pass to the ABI function.
      items:
        $ref: '#/components/schemas/AnyValue'
      example:
        - '0x6E5eAf34c73D1CD0be4e24f923b97CF38e10d1f3'
        - 1
    RefId:
      type: string
      description: RefID is a custom label field.
      example: d620d523-b5ab-4541-94b0-efe4f4c825c8
    IdempotencyKey:
      type: string
      description: IdempotencyKey is for idempotent retry on a POST request. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net).
      example: a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
      format: uuid
    Error:
      type: object
      properties:
        code:
          type: integer
          description: Code is the error code
        message:
          type: string
          description: Message is the error message
    Id:
      type: string
      format: uuid
      description: Unique system generated identifier for the entity.
    Blockchain:
      type: string
      enum:
        - ETH-GOERLI
        - ETH
        - AVAX-FUJI
        - AVAX
        - MATIC-MUMBAI
        - MATIC
    UpdateDate:
      type: string
      format: date-time
      description: Last update date of the resource. ISO-8601 UTC date/time.
      example: '2023-01-01T12:04:05Z'
    CreateDate:
      type: string
      format: date-time
      description: Created date for the resource. ISO-8601 UTC date/time.
      example: '2023-01-01T12:04:05Z'
    Status:
      type: object
      properties:
        version:
          type: string
          example: '1.0'
        message:
          type: string
          example: Success
    TokenMonitorScope:
      type: string
      enum:
        - SELECTED
        - MONITOR_ALL
    schemas_Id:
      type: string
      format: uuid
      description: Unique system generated identifier of the resource.
      example: c4d1da72-111e-4d52-bdbf-2e74a2d803d5
    TokenStandard:
      type: string
      enum:
        - ERC20
        - ERC721
        - ERC1155
    schemas_Blockchain:
      type: string
      description: The blockchain network the resource will be created on or is currently on.
      enum:
        - ETH-GOERLI
        - ETH
        - AVAX-FUJI
        - AVAX
        - MATIC-MUMBAI
        - MATIC
      example: MATIC-MUMBAI
    schemas_CreateDate:
      type: string
      format: date-time
      description: Date and time the resource was created. ISO-8601 UTC date/time.
      example: '2023-01-01T12:04:05Z'
    TokenResponse:
      type: object
      required:
        - id
        - blockchain
        - isNative
        - createDate
        - updateDate
      properties:
        id:
          $ref: '#/components/schemas/schemas_Id'
        name:
          type: string
          description: Blockchain name of the specified token.
        standard:
          $ref: '#/components/schemas/TokenStandard'
        blockchain:
          $ref: '#/components/schemas/schemas_Blockchain'
        decimals:
          type: integer
          description: Number of decimal places shown in the token amount.
        isNative:
          type: boolean
          description: Defines if the token is a native token of the specified blockchain. If TRUE, the token is a native token.
        symbol:
          type: string
          description: Blockchain symbol of the specified token.
        tokenAddress:
          type: string
          description: Blockchain address of the specified token.
        updateDate:
          $ref: '#/components/schemas/UpdateDate'
        createDate:
          $ref: '#/components/schemas/schemas_CreateDate'
    GetMonitoredTokensResponse:
      type: object
      properties:
        scope:
          $ref: '#/components/schemas/TokenMonitorScope'
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/TokenResponse'
          description: The list of tokens that are currently on the monitored tokens list. When fetching wallet balances, only these tokens will be shown by default.
    PutMonitoredTokensRequest:
      type: object
      properties:
        tokenIds:
          type: array
          items:
            format: uuid
            type: string
          description: The list of tokens that will be added to the monitored tokens list. When fetching wallet balances, these tokens will be shown by default.
          example:
            - a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
    PutMonitoredTokensResponse:
      type: object
      properties:
        scope:
          $ref: '#/components/schemas/TokenMonitorScope'
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/TokenResponse'
          description: The list of tokens that have been added to the monitored tokens list. When fetching wallet balances, these tokens will be shown by default.
    PostMonitoredTokensRequest:
      type: object
      required:
        - tokenIds
      properties:
        tokenIds:
          type: array
          items:
            format: uuid
            type: string
          description: The list of tokens to be added to the monitored tokens list. When fetching wallet balances, only these tokens will be shown by default.
          example:
            - a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
          minItems: 1
    PostMonitoredTokensResponse:
      properties:
        scope:
          $ref: '#/components/schemas/TokenMonitorScope'
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/TokenResponse'
          description: The list of tokens that have been added to the monitored tokens list. When fetching wallet balances, only these tokens will be shown by default.
      type: object
    PutMonitoredTokensScopeRequest:
      type: object
      required:
        - scope
      properties:
        scope:
          $ref: '#/components/schemas/TokenMonitorScope'
    DeleteMonitoredTokensRequest:
      properties:
        tokenIds:
          type: array
          items:
            type: string
            format: uuid
          description: Token ids to be removed from the monitored tokens list. Once removed, these tokens will no longer be shown by default when fetching wallet balances.
          example:
            - a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
          minItems: 1
      required:
        - tokenIds
      type: object
    GetPublicKeyResponse:
      type: object
      properties:
        publicKey:
          type: string
    GetEntityConfigResponse:
      type: object
      properties:
        appId:
          example: 78fb905b-12c2-45aa-8fc4-c60261c9e9ee
          format: uuid
          type: string
    schemas_IdempotencyKey:
      type: string
      description: Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net).
      example: a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
      format: uuid
    EntitySecretCiphertext:
      type: string
      description: |
        A base64 string expression of the entity secret ciphertext. The entity secret should be encrypted by the entity public key. Circle mandates that the entity secret ciphertext is unique for each API request.
      format: byte
      example: 0NtD3d3+nmgb4GqYQXzAjKF8h5Zq6sHM2k/7UQz5OIXWnU7H8O9XvVYXqDnw1wEmY...
    CreateDeveloperWalletSetRequest:
      type: object
      required:
        - entitySecretCiphertext
        - idempotencyKey
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/schemas_IdempotencyKey'
        entitySecretCiphertext:
          $ref: '#/components/schemas/EntitySecretCiphertext'
        name:
          type: string
          example: treasury wallet set 1
    CustodyType:
      type: string
      enum:
        - DEVELOPER
        - ENDUSER
    ExternalUserId:
      type: string
      description: Unique system generated identifier for the user.
      example: ext_user_id_1
      maxLength: 50
      minLength: 5
    WalletSetResponse:
      type: object
      required:
        - id
        - custodyType
        - updateDate
        - createDate
      properties:
        id:
          $ref: '#/components/schemas/schemas_Id'
        createDate:
          $ref: '#/components/schemas/schemas_CreateDate'
        custodyType:
          $ref: '#/components/schemas/CustodyType'
        name:
          type: string
          description: Name or description of the wallet set.
          example: treasury wallet set 1
        updateDate:
          type: string
          format: date-time
          description: Last update date of the wallet set. ISO-8601 UTC date/time.
          example: '2023-01-01T12:04:05Z'
        userId:
          $ref: '#/components/schemas/ExternalUserId'
    CreateDeveloperWalletSetResponse:
      type: object
      properties:
        walletSet:
          $ref: '#/components/schemas/WalletSetResponse'
    UpdateWalletSetMetadataRequest:
      type: object
      properties:
        name:
          type: string
          example: My updated wallet set name
          minLength: 1
    UpdateWalletSetMetadataResponse:
      type: object
      properties:
        walletSet:
          $ref: '#/components/schemas/WalletSetResponse'
    GetWalletSetsResponse:
      type: object
      properties:
        walletSets:
          type: array
          items:
            $ref: '#/components/schemas/WalletSetResponse'
    GetWalletSetByIDResponse:
      type: object
      properties:
        walletSet:
          $ref: '#/components/schemas/WalletSetResponse'
    AccountType:
      type: string
      description: |
        An Account can be a Smart Contract Account (SCA) or an Externally Owned Account (EOA). To learn more about account types and the differences between the two, see the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types).

        If an account type is not specified during the creation of a wallet, it will default to `EOA` (Externally Owned Account).
      enum:
        - SCA
        - EOA
    TransactionReferenceId:
      type: string
      example: grouptransaction123
      description: Optional reference or description used to identify the transaction.
    WalletMetadata:
      type: object
      properties:
        name:
          type: string
          description: Name or description associated with the wallet.
          example: My Wallet 1
        refId:
          $ref: '#/components/schemas/TransactionReferenceId'
    WalletSetId:
      type: string
      description: Unique system generated identifier of the wallet's parent wallet set. under.
      example: 71f2a6b4-ffa7-417a-ad5b-fb928753edc8
    CreateDeveloperWalletRequest:
      type: object
      required:
        - blockchains
        - entitySecretCiphertext
        - walletSetId
        - idempotencyKey
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/schemas_IdempotencyKey'
        accountType:
          $ref: '#/components/schemas/AccountType'
        blockchains:
          type: array
          items:
            $ref: '#/components/schemas/schemas_Blockchain'
          description: Blockchain(s) the requested wallets will be created on.
        count:
          type: integer
          description: Number of wallets that will be created per specified blockchain.
          example: 2
          maximum: 20
          minimum: 1
        entitySecretCiphertext:
          $ref: '#/components/schemas/EntitySecretCiphertext'
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/WalletMetadata'
          description: List of metadata fields to associate with the corresponding wallet. If count is specified, the amount of items in the array should match the count field.
        walletSetId:
          $ref: '#/components/schemas/WalletSetId'
    BlockchainAddress:
      description: The blockchain address generated upon wallet creation.
      type: string
    WalletReferenceId:
      type: string
      description: Optional reference or description used to identify the wallet.
      example: wallet123
    WalletState:
      type: string
      enum:
        - LIVE
        - FROZEN
      example: LIVE
    WalletResponse:
      type: object
      required:
        - id
        - state
        - walletSetId
        - custodyType
        - address
        - blockchain
        - createDate
        - updateDate
      properties:
        id:
          $ref: '#/components/schemas/schemas_Id'
        address:
          $ref: '#/components/schemas/BlockchainAddress'
        blockchain:
          $ref: '#/components/schemas/schemas_Blockchain'
        createDate:
          $ref: '#/components/schemas/schemas_CreateDate'
        custodyType:
          $ref: '#/components/schemas/CustodyType'
        accountType:
          $ref: '#/components/schemas/AccountType'
        name:
          type: string
          description: Name or description associated with the wallet.
          example: My walletResponse
        refId:
          $ref: '#/components/schemas/WalletReferenceId'
        state:
          $ref: '#/components/schemas/WalletState'
        updateDate:
          $ref: '#/components/schemas/UpdateDate'
        userId:
          $ref: '#/components/schemas/ExternalUserId'
        walletSetId:
          $ref: '#/components/schemas/WalletSetId'
    CreateDeveloperWalletResponse:
      type: object
      properties:
        wallets:
          type: array
          items:
            $ref: '#/components/schemas/WalletResponse'
          description: Lists the details for the created wallets.
    ExtGetAllWalletsResponse:
      type: object
      properties:
        wallets:
          type: array
          items:
            $ref: '#/components/schemas/WalletResponse'
    ExtGetWalletByIDResponse:
      type: object
      properties:
        wallet:
          $ref: '#/components/schemas/WalletResponse'
    ExtUpdateWalletMetadataRequest:
      type: object
      properties:
        name:
          type: string
        refId:
          $ref: '#/components/schemas/WalletReferenceId'
    ExtWalletResponse:
      type: object
      properties:
        wallet:
          type: object
          properties:
            id:
              $ref: '#/components/schemas/schemas_Id'
            address:
              $ref: '#/components/schemas/BlockchainAddress'
            blockchain:
              $ref: '#/components/schemas/schemas_Blockchain'
            createDate:
              $ref: '#/components/schemas/schemas_CreateDate'
            custodyType:
              $ref: '#/components/schemas/CustodyType'
            accountType:
              $ref: '#/components/schemas/AccountType'
            name:
              type: string
              description: Name or description associated with the wallet.
              example: My ExtWalletResponse
            refId:
              $ref: '#/components/schemas/WalletReferenceId'
            state:
              $ref: '#/components/schemas/WalletState'
            updateDate:
              $ref: '#/components/schemas/UpdateDate'
            userId:
              $ref: '#/components/schemas/ExternalUserId'
            walletSetId:
              $ref: '#/components/schemas/WalletSetId'
    Balance:
      type: object
      required:
        - token
        - updateDate
        - amount
      properties:
        amount:
          type: string
          description: List of token balances for each token on the wallet(s).
          example: '6.62607015'
        token:
          $ref: '#/components/schemas/TokenResponse'
        updateDate:
          $ref: '#/components/schemas/UpdateDate'
    GetBalancesResponse:
      type: object
      properties:
        tokenBalances:
          description: List of token balances for each token on the wallet(s).
          type: array
          items:
            $ref: '#/components/schemas/Balance'
    Nft:
      type: object
      required:
        - nftTokenId
        - token
        - amount
        - updateDate
      properties:
        amount:
          type: string
          description: Amount of NFTs on a wallet. For non-fungible token standards, like ERC721, amount will always be “1”; for semi-fungible token standards like ERC1155, amount will correspond to the number of tokens.
          example: '1'
        metadata:
          type: string
          description: The metadata of the NFT.
          example: ipfs://QmZcH4YvBVVRJtdn4RdbaqgspFU8gH6P9vomDpBVpAL3u4/1
        nftTokenId:
          type: string
          description: The NFT token ID.
          example: '2'
        token:
          $ref: '#/components/schemas/TokenResponse'
        updateDate:
          $ref: '#/components/schemas/UpdateDate'
    GetNftsResponse:
      type: object
      properties:
        nfts:
          type: array
          items:
            $ref: '#/components/schemas/Nft'
    TransferAmounts:
      type: array
      items:
        type: string
      description: Transfer amount in decimal number format.
      example:
        - '6.62607015'
      minItems: 1
    DestinationAddress:
      type: string
      description: The destination blockchain address for the transaction.
    FeeLevel:
      type: string
      enum:
        - LOW
        - MEDIUM
        - HIGH
      example: MEDIUM
      description: |
        A dynamic blockchain fee level setting (`LOW`, `MEDIUM`, or `HIGH`) that will be used to pay gas for the transaction. Calculated based on network traffic, supply of validators, and demand for transaction verification. Cannot be used with `gasLimit`, `gasPrice`, `baseFee`, `priorityFee`, or `maxFee`.
        Estimates for each fee level can be obtained through the Estimate fee API call.
    GasLimit:
      type: string
      description: |
        The maximum units of gas to be used for the transaction. Required if `feeLevel` is not provided.
        Estimates for this limit can be obtained through the estimate fee API call.
      example: '21000'
    GasPrice:
      type: string
      description: |
        For blockchains with EIP-1559 support, the maximum price of gas, in gwei, to be used per each unit of gas (see `gasLimit`). Requires `gasLimit`. Cannot be used with `feeLevel`, `baseFee`, `priorityFee`, or `maxFee`.
        Estimates for this fee can be obtained through the estimate fee API call.
    MaxFee:
      type: string
      example: '5.935224468'
      description: |
        The maximum price per unit of gas (see `gasLimit`), in gwei. Requires `baseFee`, `priorityFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`.
        Estimates for this fee can be obtained through the estimate fee API call.
    PriorityFee:
      type: string
      example: '1.022783914'
      description: |
        The “tip”, in gwei, to be added to the baseFee as an incentive for validators. Requires `baseFee`, `maxFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`.
        Estimates for this fee can be obtained through the estimate fee API call.
    schemas_WalletId:
      type: string
      format: uuid
      description: Unique system generated identifier of the wallet. Required when source Address and blockchain is not provided. Mutually exclusive. For contract deploys this wallet ID will be used as the source.
      example: a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
    CreateTransferTransactionForDeveloperRequest:
      type: object
      required:
        - destinationAddress
        - entitySecretCiphertext
        - idempotencyKey
        - tokenId
        - walletId
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/schemas_IdempotencyKey'
        amounts:
          $ref: '#/components/schemas/TransferAmounts'
        destinationAddress:
          $ref: '#/components/schemas/DestinationAddress'
        entitySecretCiphertext:
          $ref: '#/components/schemas/EntitySecretCiphertext'
        feeLevel:
          $ref: '#/components/schemas/FeeLevel'
        gasLimit:
          $ref: '#/components/schemas/GasLimit'
        gasPrice:
          $ref: '#/components/schemas/GasPrice'
        maxFee:
          $ref: '#/components/schemas/MaxFee'
        priorityFee:
          $ref: '#/components/schemas/PriorityFee'
        nftTokenIds:
          type: array
          items:
            type: string
          description: NftTokenIDs specify the nft ID list to be transferred/batchTransferred for NFT withdrawal. Note. Only erc1155 supports safeBatchTransferFrom.
        refId:
          $ref: '#/components/schemas/TransactionReferenceId'
        tokenId:
          description: The unique system generated identifier associated with the token.
          example: a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
          format: uuid
          type: string
        walletId:
          $ref: '#/components/schemas/schemas_WalletId'
    TransactionState:
      type: string
      description: Current state of the transaction.
      enum:
        - INITIATED
        - PENDING_RISK_SCREENING
        - DENIED
        - QUEUED
        - SENT
        - CONFIRMED
        - COMPLETE
        - FAILED
        - CANCELLED
    CreateTransferTransactionForDeveloperResponse:
      type: object
      required:
        - id
        - state
      properties:
        id:
          $ref: '#/components/schemas/schemas_Id'
        state:
          $ref: '#/components/schemas/TransactionState'
    AccelerateTransactionForDeveloperRequest:
      type: object
      required:
        - entitySecretCiphertext
        - idempotencyKey
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/schemas_IdempotencyKey'
        entitySecretCiphertext:
          $ref: '#/components/schemas/EntitySecretCiphertext'
    AccelerateTransactionForDeveloperResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/schemas_Id'
    CancelTransactionForDeveloperRequest:
      type: object
      required:
        - entitySecretCiphertext
        - idempotencyKey
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/schemas_IdempotencyKey'
        entitySecretCiphertext:
          $ref: '#/components/schemas/EntitySecretCiphertext'
    CancelTransactionForDeveloperResponse:
      type: object
      required:
        - id
        - state
      properties:
        id:
          $ref: '#/components/schemas/schemas_Id'
        state:
          $ref: '#/components/schemas/TransactionState'
    schemas_AbiFunctionSignature:
      type: string
      description: "The contract ABI function signature or\_`callData`\_field is required for interacting with the smart contract. The ABI function signature cannot be used simultaneously with\_`callData`. e.g. burn(uint256)"
      example: burn(uint256)
    schemas_AbiParameters:
      type: array
      items:
        type: string
      description: "The contract ABI function signature parameters for executing the contract interaction. Supported parameter types include string, integer, boolean, and array. These parameters should be used exclusively with the abiFunctionSignature and cannot be used with\_`callData`."
      example:
        - '100'
        - '1'
    CallData:
      type: string
      description: "The raw transaction data, must be an even-length hexadecimal string with the\_`0x`\_prefix, to be executed. It is important to note that the usage of\_`callData`\_is mutually exclusive with the\_`abiFunctionSignature`\_and\_`abiParameters`. Therefore,\_`callData`\_cannot be utilized simultaneously with either\_`abiFunctionSignature`\_or\_`abiParameters`."
      example: '0xcdcd77c000000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001'
    Amount:
      type: string
      description: The amount of native token that will be sent to the contract abi execution. Optional field for payable api only, if not provided, no native token will be sent.
      example: '1.0'
    ContractAddress:
      description: The blockchain address of the contract to be executed.
      type: string
    CreateContractExecutionTransactionForDeveloperRequest:
      type: object
      required:
        - contractAddress
        - entitySecretCiphertext
        - idempotencyKey
        - walletId
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/schemas_IdempotencyKey'
        abiFunctionSignature:
          $ref: '#/components/schemas/schemas_AbiFunctionSignature'
        abiParameters:
          $ref: '#/components/schemas/schemas_AbiParameters'
        callData:
          $ref: '#/components/schemas/CallData'
        amount:
          $ref: '#/components/schemas/Amount'
        contractAddress:
          $ref: '#/components/schemas/ContractAddress'
        entitySecretCiphertext:
          $ref: '#/components/schemas/EntitySecretCiphertext'
        feeLevel:
          $ref: '#/components/schemas/FeeLevel'
        gasLimit:
          $ref: '#/components/schemas/GasLimit'
        gasPrice:
          $ref: '#/components/schemas/GasPrice'
        maxFee:
          $ref: '#/components/schemas/MaxFee'
        priorityFee:
          $ref: '#/components/schemas/PriorityFee'
        refId:
          $ref: '#/components/schemas/TransactionReferenceId'
        walletId:
          $ref: '#/components/schemas/schemas_WalletId'
    CreateContractExecutionTransactionForDeveloperResponse:
      type: object
      required:
        - id
        - state
      properties:
        id:
          description: Unique system generated identifier of the transaction.
          type: string
        state:
          $ref: '#/components/schemas/TransactionState'
    BaseFee:
      type: string
      example: '2.456220277'
      description: |
        The base price per unit of gas (see `gasLimit`), in gwei, required to execute the transaction. Determined by the blockchain protocol. Requires `priorityFee`, `maxFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`.
        Estimates for this fee can be obtained through the estimate fee API call.  
    EstimatedTransactionFee:
      type: object
      properties:
        baseFee:
          $ref: '#/components/schemas/BaseFee'
        gasLimit:
          $ref: '#/components/schemas/GasLimit'
        gasPrice:
          $ref: '#/components/schemas/GasPrice'
        maxFee:
          $ref: '#/components/schemas/MaxFee'
        priorityFee:
          $ref: '#/components/schemas/PriorityFee'
    Operation:
      type: string
      enum:
        - TRANSFER
        - CONTRACT_EXECUTION
        - CONTRACT_DEPLOYMENT
      description: Operation type of the transaction.
    schemas_SourceAddress:
      type: string
      description: The source blockchain address of the transaction.
      example: '0x1bf9ad0cc2ad298c69a2995aa806ee832788218c'
    TokenId:
      type: string
      format: uuid
      description: System generated identifier of the token.
    TransactionType:
      type: string
      enum:
        - INBOUND
        - OUTBOUND
    TransactionHash:
      type: string
      description: Blockchain generated identifier of the transaction.
      example: '0x4a25cc5e661d8504b59c5f38ba93f010e8518966f00e2ceda7955c4b8621357d'
    Transaction:
      type: object
      required:
        - id
        - state
        - blockchain
        - transactionType
        - createDate
        - updateDate
      properties:
        id:
          $ref: '#/components/schemas/schemas_Id'
        abiFunctionSignature:
          $ref: '#/components/schemas/schemas_AbiFunctionSignature'
        abiParameters:
          $ref: '#/components/schemas/schemas_AbiParameters'
        amounts:
          $ref: '#/components/schemas/TransferAmounts'
        amountInUSD:
          type: string
          description: Transaction amount in USD decimal format.
        blockHash:
          type: string
          description: Identifier for the block that includes the transaction.
        blockHeight:
          type: integer
          description: Block height of the transaction, representing the number of blockchain confirmations.
        blockchain:
          $ref: '#/components/schemas/schemas_Blockchain'
        contractAddress:
          $ref: '#/components/schemas/ContractAddress'
        createDate:
          $ref: '#/components/schemas/schemas_CreateDate'
        custodyType:
          $ref: '#/components/schemas/CustodyType'
        destinationAddress:
          $ref: '#/components/schemas/DestinationAddress'
        errorReason:
          type: string
          description: Description of the error. Only present for transactions in `FAILED` state.
        estimatedFee:
          allOf:
            - $ref: '#/components/schemas/EstimatedTransactionFee'
          description: |
            The estimated fee for the transaction.
            For Get Transactions API, this will only be returned if transaction type is used in the request query parameters
        feeLevel:
          allOf:
            - $ref: '#/components/schemas/FeeLevel'
          description: |-
            Defines the blockchain fee level which will be paid for the transaction e.g. LOW, MEDIUM, HIGH.
            For Get Transactions API, this will only be returned if transaction type is used in the request query parameters
        firstConfirmDate:
          type: string
          format: date-time
          description: Date the transaction was first confirmed in a block. ISO-8601 UTC date/time.
          example: '2021-05-18T00:00:00Z'
        networkFee:
          type: string
          description: Gas fee, in native token, paid to the network for the transaction.
        networkFeeInUSD:
          type: string
          description: Gas fee, in USD, paid to the network for the transaction.
        nfts:
          type: array
          description: List of Nfts, in JSON string format, associated with the transaction.
          example:
            - '[{"ntfTokenId":"12321"'
            - '"metadata":"ipfs://QmZcH4YvBVVRJtdn4RdbaqgspFU8gH6P9vomDpBVpAL3u4/1"}'
            - '{"ntfTokenId":"12322"'
            - '"metadata":"ipfs://QmZcH4YvBVVRJtdn4RdbaqgspFU8gH6P9vomDpBVpAL3u4/2"}]'
          items:
            type: string
        operation:
          $ref: '#/components/schemas/Operation'
        refId:
          $ref: '#/components/schemas/TransactionReferenceId'
        sourceAddress:
          $ref: '#/components/schemas/schemas_SourceAddress'
        state:
          $ref: '#/components/schemas/TransactionState'
        tokenId:
          $ref: '#/components/schemas/TokenId'
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        txHash:
          $ref: '#/components/schemas/TransactionHash'
        updateDate:
          $ref: '#/components/schemas/UpdateDate'
        userId:
          $ref: '#/components/schemas/ExternalUserId'
        walletId:
          $ref: '#/components/schemas/schemas_WalletId'
    GetTransactionsResponse:
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
    GetTransactionByIDResponse:
      properties:
        transaction:
          $ref: '#/components/schemas/Transaction'
      type: object
    NftTokenIds:
      type: array
      description: List of NFT token ids corresponding with the NFTs to be transferred. Batch transfers are only supported for ERC-1155 tokens.
      items:
        type: string
    EstimateTransferTransactionFeeRequest:
      type: object
      required:
        - amounts
        - destinationAddress
        - tokenId
      properties:
        amounts:
          $ref: '#/components/schemas/TransferAmounts'
        destinationAddress:
          $ref: '#/components/schemas/DestinationAddress'
        nftTokenIds:
          $ref: '#/components/schemas/NftTokenIds'
        sourceAddress:
          $ref: '#/components/schemas/schemas_SourceAddress'
        tokenId:
          $ref: '#/components/schemas/TokenId'
        walletId:
          $ref: '#/components/schemas/schemas_WalletId'
    CallGasLimit:
      type: string
      description: One of ERC-4337 gas fields. The amount of gas to allocate for the main execution call. Only in smart contract account estimation response.
      example: '69222'
    VerificationGasLimit:
      type: string
      description: One of ERC-4337 gas fields. The amount of gas to allocate for the verification step. Only in smart contract account estimation response.
      example: '56863'
    PreVerificationGas:
      type: string
      description: One of ERC-4337 gas fields. The amount of gas to pay to compensate the bundler for pre-verification execution and call data. Only in smart contract account estimation response.
      example: '44112'
    EstimateTransactionFeeResponse:
      type: object
      properties:
        high:
          $ref: '#/components/schemas/EstimatedTransactionFee'
        low:
          $ref: '#/components/schemas/EstimatedTransactionFee'
        medium:
          $ref: '#/components/schemas/EstimatedTransactionFee'
        callGasLimit:
          $ref: '#/components/schemas/CallGasLimit'
        verificationGasLimit:
          $ref: '#/components/schemas/VerificationGasLimit'
        preVerificationGas:
          $ref: '#/components/schemas/PreVerificationGas'
    EstimateContractExecutionTransactionFeeRequest:
      type: object
      required:
        - abiFunctionSignature
        - contractAddress
      properties:
        abiFunctionSignature:
          $ref: '#/components/schemas/schemas_AbiFunctionSignature'
        abiParameters:
          $ref: '#/components/schemas/schemas_AbiParameters'
        callData:
          $ref: '#/components/schemas/CallData'
        amount:
          $ref: '#/components/schemas/Amount'
        blockchain:
          description: |
            Blockchain associated with the transaction. Required along with sourceAddress
            if walletId is not provided. The blockchain and walletId fields are mutually exclusive.
          allOf:
            - $ref: '#/components/schemas/schemas_Blockchain'
        contractAddress:
          $ref: '#/components/schemas/ContractAddress'
        sourceAddress:
          allOf:
            - $ref: '#/components/schemas/schemas_SourceAddress'
          description: |
            Source address of the transaction. Required along with blockchain if walletId is
            not provided. The sourceAddress and walletId fields are mutually exclusive.
        walletId:
          allOf:
            - $ref: '#/components/schemas/schemas_WalletId'
          description: |
            The source wallet id of the transaction. Required if sourceAddress and blockchain are not provided. The walletId field is mutually exclusive to the blockchain and sourceAddress fields.
    ValidateAddressRequest:
      type: object
      required:
        - address
        - blockchain
      properties:
        address:
          $ref: '#/components/schemas/BlockchainAddress'
        blockchain:
          $ref: '#/components/schemas/schemas_Blockchain'
    ValidateAddressResponse:
      type: object
      required:
        - isValid
      properties:
        isValid:
          type: boolean
    EncodedByHex:
      type: boolean
      description: Indicator of whether the input message is encoded by hex. If TRUE, then the message should be a hex string. By default, it is False.
      example: false
    Message:
      type: string
      description: The user friendly message that needs to be signed. If it is a hex string, encodedByHex needs to be TRUE. The hex string should start with “0x” and have even length.
      example: I agree with this transfer
    Memo:
      type: string
      description: The human readable explanation for this sign action. Useful for presenting with extra information.
      example: Transfer USDC to Sam
    SignMessageForDeveloperRequest:
      type: object
      required:
        - message
        - walletId
        - entitySecretCiphertext
      properties:
        walletId:
          $ref: '#/components/schemas/schemas_WalletId'
        encodedByHex:
          $ref: '#/components/schemas/EncodedByHex'
        message:
          $ref: '#/components/schemas/Message'
        memo:
          $ref: '#/components/schemas/Memo'
        entitySecretCiphertext:
          $ref: '#/components/schemas/EntitySecretCiphertext'
    Signature:
      type: string
      description: Signature is a hex encoded 65 byte array starting with 0x.
      example: 0x977c17f82d8b042b67b09d0e61e7d324f050cb000c17a08...
    SignMessageForDeveloperResponse:
      type: object
      required:
        - signature
      properties:
        signature:
          $ref: '#/components/schemas/Signature'
    Data:
      type: string
      description: A string represents the typed structured data in EIP-712
      example: '{ "types": { "Data": [{ "name": "dummy", "type": "string" }],}, "domain": { "name": "Test", "chainId": 1337 }, "primaryType": "Data", "message": { "dummy": "dummy" }}'
    SignTypedDataForDeveloperRequest:
      type: object
      required:
        - data
        - walletId
        - entitySecretCiphertext
      properties:
        walletId:
          $ref: '#/components/schemas/schemas_WalletId'
        data:
          $ref: '#/components/schemas/Data'
        memo:
          $ref: '#/components/schemas/Memo'
        entitySecretCiphertext:
          $ref: '#/components/schemas/EntitySecretCiphertext'
    SignTypedDataForDeveloperResponse:
      type: object
      required:
        - signature
      properties:
        signature:
          $ref: '#/components/schemas/Signature'
    GetTokenByIDResponse:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/TokenResponse'
    PinStatus:
      type: string
      enum:
        - ENABLED
        - UNSET
        - LOCKED
      description: Status of the user PIN code. PIN must be in ENABLED state to authorize requests.
      example: ENABLED
    EndUserStatus:
      type: string
      enum:
        - ENABLED
        - DISABLED
      example: ENABLED
    PinSecurityDetails:
      type: object
      properties:
        failedAttempts:
          type: integer
          description: |
            FailedAttempts the number of times a user has entered an invalid
            pin code.
        lockedDate:
          format: date-time
          type: string
          description: The date and time when the pin code has been locked.
          example: '2023-01-01T12:04:05Z'
        lockedExpiryDate:
          type: string
          format: date-time
          description: The date and time when the pin code will be unlocked.
          example: '2023-01-01T12:04:05Z'
        lastLockOverrideDate:
          type: string
          format: date-time
          description: This is the last date and time when the lock was unlocked by admin manually.
          example: '2023-01-01T12:04:05Z'
    EndUser:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/schemas_Id'
        createDate:
          $ref: '#/components/schemas/schemas_CreateDate'
        pinStatus:
          $ref: '#/components/schemas/PinStatus'
        status:
          $ref: '#/components/schemas/EndUserStatus'
        securityQuestionStatus:
          type: string
          enum:
            - ENABLED
            - UNSET
            - LOCKED
          example: ENABLED
        pinDetails:
          allOf:
            - $ref: '#/components/schemas/PinSecurityDetails'
        securityQuestionDetails:
          allOf:
            - $ref: '#/components/schemas/PinSecurityDetails'
    ExtGetAllEndUsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/EndUser'
    CreateUserRequest:
      type: object
      required:
        - userId
      properties:
        userId:
          $ref: '#/components/schemas/ExternalUserId'
    GetEndUserByIDResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/EndUser'
    GenerateUserTokenRequest:
      type: object
      required:
        - userId
      properties:
        userId:
          $ref: '#/components/schemas/ExternalUserId'
    GenerateUserTokenResponse:
      type: object
      required:
        - userToken
      properties:
        userToken:
          type: string
          description: Unique system generated JWT session token. The token will expire after 60 minutes.
        encryptionKey:
          type: string
          description: Encryption key to be used with the SDK for initiating user challenges.
    MetadataField:
      type: object
      properties:
        name:
          type: string
          description: Name or description associated with the wallet.
          example: My walletResponse
        refId:
          $ref: '#/components/schemas/WalletReferenceId'
    SetPinAndInitWalletRequest:
      type: object
      required:
        - idempotencyKey
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/schemas_IdempotencyKey'
        accountType:
          $ref: '#/components/schemas/AccountType'
        blockchains:
          type: array
          items:
            $ref: '#/components/schemas/schemas_Blockchain'
          description: Blockchain(s) the requested wallets will be created on.
          example:
            - ETH
          minItems: 1
        metadata:
          type: array
          description: List of metadata fields to associate with the corresponding wallet.
          items:
            $ref: '#/components/schemas/MetadataField'
    ChallengeId:
      type: string
      format: uuid
      description: Unique system generated identifier used to initiate a user challenge flow.
      example: c4d1da72-111e-4d52-bdbf-2e74a2d803d5
    SetPinResponse:
      type: object
      required:
        - challengeId
      properties:
        challengeId:
          $ref: '#/components/schemas/ChallengeId'
    Challenge:
      type: object
      required:
        - id
        - type
        - status
      properties:
        id:
          $ref: '#/components/schemas/schemas_Id'
        correlationIds:
          type: array
          items:
            type: string
          description: |
            For type CREATE_WALLET, the wallet id associated with the request. For types
            CREATE_TRANSACTION, ACCELERATE_TRANSACTION, and CANCEL_TRANSACTION, the transaction id associated with the request. 
          example:
            - 54399e5a-1bf6-4921-9559-10c1115678cd
        errorCode:
          description: Indicates the failure reason of a challenge. Only present for challenges in FAILED status.
          example: 155121
          type: integer
        errorMessage:
          description: Description of the error or error reason. Only present for challenges in FAILED status.
          example: challenge expired
          type: string
        status:
          type: string
          enum:
            - PENDING
            - IN_PROGRESS
            - COMPLETE
            - FAILED
            - EXPIRED
          example: PENDING
        type:
          type: string
          enum:
            - ''
            - INITIALIZE
            - SET_PIN
            - CHANGE_PIN
            - SET_SECURITY_QUESTIONS
            - CREATE_WALLET
            - RESTORE_PIN
            - CREATE_TRANSACTION
            - ACCELERATE_TRANSACTION
            - CANCEL_TRANSACTION
            - CONTRACT_EXECUTION
            - SIGN_MESSAGE
            - SIGN_TYPEDDATA
          description: The challenge type
          example: SET_PIN
    GetEndUserChallengesResponse:
      type: object
      properties:
        challenges:
          type: array
          items:
            $ref: '#/components/schemas/Challenge'
    GetEndUserChallengeByIDResponse:
      type: object
      properties:
        challenge:
          $ref: '#/components/schemas/Challenge'
    ChangePinRequest:
      type: object
      required:
        - idempotencyKey
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/schemas_IdempotencyKey'
    ChangePinResponse:
      type: object
      required:
        - challengeId
      properties:
        challengeId:
          $ref: '#/components/schemas/ChallengeId'
    SetPinRequest:
      type: object
      required:
        - idempotencyKey
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/schemas_IdempotencyKey'
    RestorePinRequest:
      type: object
      required:
        - idempotencyKey
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/schemas_IdempotencyKey'
    RestorePinResponse:
      type: object
      required:
        - challengeId
      properties:
        challengeId:
          $ref: '#/components/schemas/ChallengeId'
    CreateEndUserWalletRequest:
      type: object
      required:
        - blockchains
        - idempotencyKey
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/schemas_IdempotencyKey'
        accountType:
          $ref: '#/components/schemas/AccountType'
        blockchains:
          type: array
          description: Blockchain(s) the requested wallets will be created on.
          items:
            $ref: '#/components/schemas/schemas_Blockchain'
        metadata:
          type: array
          description: List of metadata fields to associate with the corresponding wallet.
          items:
            $ref: '#/components/schemas/MetadataField'
    CreateEndUserWalletResponse:
      type: object
      properties:
        challengeId:
          $ref: '#/components/schemas/ChallengeId'
    CreateTransferTransactionForEndUserRequest:
      type: object
      required:
        - destinationAddress
        - idempotencyKey
        - tokenId
        - walletId
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/schemas_IdempotencyKey'
        amounts:
          $ref: '#/components/schemas/TransferAmounts'
        destinationAddress:
          $ref: '#/components/schemas/DestinationAddress'
        feeLevel:
          $ref: '#/components/schemas/FeeLevel'
        gasLimit:
          $ref: '#/components/schemas/GasLimit'
        gasPrice:
          $ref: '#/components/schemas/GasPrice'
        maxFee:
          $ref: '#/components/schemas/MaxFee'
        priorityFee:
          $ref: '#/components/schemas/PriorityFee'
        nftTokenIds:
          $ref: '#/components/schemas/NftTokenIds'
        refId:
          $ref: '#/components/schemas/TransactionReferenceId'
        tokenId:
          $ref: '#/components/schemas/TokenId'
        walletId:
          $ref: '#/components/schemas/schemas_WalletId'
    CreateTransferTransactionForEndUserResponse:
      type: object
      required:
        - challengeId
      properties:
        challengeId:
          $ref: '#/components/schemas/ChallengeId'
    AccelerateTransactionForEndUserRequest:
      required:
        - idempotencyKey
      type: object
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/schemas_IdempotencyKey'
    AccelerateTransactionForEndUserResponse:
      type: object
      properties:
        challengeId:
          $ref: '#/components/schemas/ChallengeId'
    CancelTransactionForEndUserRequest:
      type: object
      required:
        - idempotencyKey
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/schemas_IdempotencyKey'
    CancelTransactionForEndUserResponse:
      type: object
      required:
        - challengeId
      properties:
        challengeId:
          $ref: '#/components/schemas/ChallengeId'
    ContractExecutionTxnPinCodeRequest:
      type: object
      required:
        - contractAddress
        - idempotencyKey
        - walletId
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/schemas_IdempotencyKey'
        abiFunctionSignature:
          $ref: '#/components/schemas/schemas_AbiFunctionSignature'
        abiParameters:
          $ref: '#/components/schemas/schemas_AbiParameters'
        callData:
          $ref: '#/components/schemas/CallData'
        amount:
          $ref: '#/components/schemas/Amount'
        contractAddress:
          $ref: '#/components/schemas/ContractAddress'
        feeLevel:
          $ref: '#/components/schemas/FeeLevel'
        gasLimit:
          $ref: '#/components/schemas/GasLimit'
        gasPrice:
          $ref: '#/components/schemas/GasPrice'
        maxFee:
          $ref: '#/components/schemas/MaxFee'
        priorityFee:
          $ref: '#/components/schemas/PriorityFee'
        refId:
          $ref: '#/components/schemas/TransactionReferenceId'
        walletId:
          $ref: '#/components/schemas/schemas_WalletId'
    CreateContractExecutionTransactionForEndUserResponse:
      type: object
      required:
        - challengeId
      properties:
        challengeId:
          $ref: '#/components/schemas/ChallengeId'
    SignMessageForEndUserRequest:
      type: object
      required:
        - message
        - walletId
      properties:
        walletId:
          $ref: '#/components/schemas/schemas_WalletId'
        encodedByHex:
          $ref: '#/components/schemas/EncodedByHex'
        message:
          $ref: '#/components/schemas/Message'
        memo:
          $ref: '#/components/schemas/Memo'
    SignMessageForEndUserResponse:
      type: object
      required:
        - challengeId
      properties:
        challengeId:
          $ref: '#/components/schemas/ChallengeId'
    SignTypedDataForEndUserRequest:
      type: object
      required:
        - data
        - walletId
      properties:
        walletId:
          $ref: '#/components/schemas/schemas_WalletId'
        data:
          $ref: '#/components/schemas/Data'
        memo:
          $ref: '#/components/schemas/Memo'
    SignTypedDataForEndUserResponse:
      type: object
      required:
        - challengeId
      properties:
        challengeId:
          $ref: '#/components/schemas/ChallengeId'
    scp-schemas_ContractName:
      type: string
      description: The name for a contract.
      example: First Contract
    scp-schemas_Blockchain:
      type: string
      description: The blockchain network the resource will be created on or is currently on.
      enum:
        - ETH-GOERLI
        - ETH
        - MATIC-MUMBAI
        - MATIC
      example: MATIC-MUMBAI
    scp-schemas_ImportContractRequest:
      type: object
      required:
        - idempotencyKey
        - name
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/schemas_IdempotencyKey'
        name:
          $ref: '#/components/schemas/scp-schemas_ContractName'
        description:
          $ref: '#/components/schemas/ContractDescription'
        address:
          type: string
          description: Address of the contract to import.
          example: '0x1e124d7384cd34448ea5907bd0052a79355ab5eb'
        blockchain:
          $ref: '#/components/schemas/scp-schemas_Blockchain'
    scp-schemas_Archived:
      description: The archive state of the contract. If true, the contract will not be visible in your dashboard.
      type: boolean
      example: false
    scp-schemas_Bytecode:
      type: string
      description: Bytecode of the contract being deployed.
      minLength: 1
      writeOnly: true
      example: 0x60806040523480156200001157600080fd5b50604051806040...
    ContractInputType:
      type: string
      description: The input type for the contract.
      enum:
        - IMPORT
        - BYTECODE
        - TEMPLATE
    ContractStatus:
      type: string
      description: The status of the contract.
      enum:
        - PENDING
        - FAILED
        - COMPLETE
    VerificationStatus:
      type: string
      description: The verification status of the contract.
      enum:
        - UNVERIFIED
        - VERIFIED
    SolFile:
      type: object
      description: Source code of a contract from Etherscan.
      required:
        - fileContent
      properties:
        fileName:
          type: string
          description: Name of the file.
          example: openzeppelin-solidity/contracts/math/SafeMath.sol
        fileContent:
          type: string
          description: Content of the file. If the contract's source code was flattened before verification, this may be the entire source code.
          example: |-
            pragma solidity ^0.4.24;

            /**
             * @title SafeMath
             * @dev Math operations with safety checks...
    ParamType:
      type: object
      properties:
        components:
          type: array
          items:
            $ref: '#/components/schemas/AnyValue'
        indexed:
          type: boolean
        name:
          type: string
          example: to
        type:
          type: string
          example: address
    Function:
      type: object
      properties:
        name:
          type: string
          example: approve
        stateMutability:
          type: string
          example: nonpayable
        type:
          type: string
          example: function
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/ParamType'
        outputs:
          type: array
          items:
            $ref: '#/components/schemas/ParamType'
    Event:
      type: object
      properties:
        name:
          type: string
          example: Approval
        type:
          type: string
          example: event
        anonymous:
          type: boolean
          example: false
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/ParamType'
    scp-schemas_Contract:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/schemas_Id'
        deployerWalletID:
          type: string
          format: uuid
          description: The `id` of the Programmable Wallet that deployed this contract.
          example: f39e3dbd-84af-4d3d-b5ac-98fbe047ce6a
        deploymentTransactionId:
          type: string
          format: uuid
          description: The id of the deployment transaction for this contract.
          example: 00ca46f3-c31b-4e3a-92a9-068d4ff26a63
        implementationContractId:
          type: string
          format: uuid
          description: If this contract is a proxy, the contract ID of the implementation.
          example: f3d81192-1f5d-4d17-ae85-5801a15ea273
        txHash:
          $ref: '#/components/schemas/TransactionHash'
        abiJson:
          $ref: '#/components/schemas/AbiJson'
        archived:
          $ref: '#/components/schemas/scp-schemas_Archived'
        blockchain:
          $ref: '#/components/schemas/scp-schemas_Blockchain'
        bytecode:
          $ref: '#/components/schemas/scp-schemas_Bytecode'
        contractAddress:
          type: string
          description: The on-chain address of this contract.
          example: '0x1e124d7384cd34448ea5907bd0052a79355ab5eb'
        contractInputType:
          $ref: '#/components/schemas/ContractInputType'
        deployerAddress:
          type: string
          description: The address that created this contract, if deployed.
          example: '0x1bf9ad0cc2ad298c69a2995aa806ee832788218c'
        name:
          $ref: '#/components/schemas/scp-schemas_ContractName'
        description:
          $ref: '#/components/schemas/ContractDescription'
        status:
          $ref: '#/components/schemas/ContractStatus'
        verificationStatus:
          $ref: '#/components/schemas/VerificationStatus'
        metadataLink:
          type: string
          description: The ipfs metadata link of the contract.
          example: https://ipfs.io/ipfs/Qme7ss3ARVgxv6rXqVPiikMJ8u2NLgmgszg13pYrDKEoiu
        updateDate:
          $ref: '#/components/schemas/UpdateDate'
        createDate:
          $ref: '#/components/schemas/schemas_CreateDate'
        sourceCode:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/SolFile'
        functions:
          type: array
          description: Functions supported by this contract. Parsed from abi_json.
          items:
            $ref: '#/components/schemas/Function'
        events:
          type: array
          description: Events this contract can emit. Parsed from abi_json.
          items:
            $ref: '#/components/schemas/Event'
    scp-schemas_ContractResponse:
      type: object
      properties:
        contract:
          $ref: '#/components/schemas/scp-schemas_Contract'
    scp-schemas_ContractDeploymentRequest:
      type: object
      required:
        - abiJson
        - bytecode
        - entitySecretCiphertext
        - idempotencyKey
        - name
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/schemas_IdempotencyKey'
        name:
          $ref: '#/components/schemas/scp-schemas_ContractName'
        description:
          $ref: '#/components/schemas/ContractDescription'
        walletId:
          $ref: '#/components/schemas/schemas_WalletId'
        abiJson:
          $ref: '#/components/schemas/AbiJson'
        bytecode:
          $ref: '#/components/schemas/scp-schemas_Bytecode'
        entitySecretCiphertext:
          $ref: '#/components/schemas/EntitySecretCiphertext'
        blockchain:
          $ref: '#/components/schemas/scp-schemas_Blockchain'
        constructorParameters:
          $ref: '#/components/schemas/ConstructorParameters'
        feeLevel:
          $ref: '#/components/schemas/FeeLevel'
        gasLimit:
          $ref: '#/components/schemas/GasLimit'
        gasPrice:
          $ref: '#/components/schemas/GasPrice'
        maxFee:
          $ref: '#/components/schemas/MaxFee'
        priorityFee:
          $ref: '#/components/schemas/PriorityFee'
        refId:
          $ref: '#/components/schemas/TransactionReferenceId'
    scp-schemas_ContractDeploymentResponse:
      type: object
      properties:
        contractId:
          type: string
          description: Unique identifier of the created smart contract.
          example: 676f83a8-81a1-4dd5-b738-e2509b8f5460
        transactionId:
          type: string
          description: Unique identifier of the deployment transaction.
          example: 36790743-b78d-4061-9558-1af9a9c837bd
    scp-schemas_ContractDeploymentEstimateFeeRequest:
      type: object
      required:
        - bytecode
      properties:
        blockchain:
          $ref: '#/components/schemas/scp-schemas_Blockchain'
        bytecode:
          $ref: '#/components/schemas/scp-schemas_Bytecode'
        constructorSignature:
          $ref: '#/components/schemas/ConstructorSignature'
        constructorParameters:
          $ref: '#/components/schemas/ConstructorParameters'
        sourceAddress:
          $ref: '#/components/schemas/schemas_SourceAddress'
        walletId:
          $ref: '#/components/schemas/schemas_WalletId'
    scp-schemas_ContractDeploymentEstimateFeeResponse:
      type: object
      properties:
        high:
          $ref: '#/components/schemas/EstimatedTransactionFee'
        low:
          $ref: '#/components/schemas/EstimatedTransactionFee'
        medium:
          $ref: '#/components/schemas/EstimatedTransactionFee'
    scp-schemas_ReadContractStateRequest:
      type: object
      properties:
        abiFunctionSignature:
          $ref: '#/components/schemas/schemas_AbiFunctionSignature'
        abiParameters:
          $ref: '#/components/schemas/schemas_AbiParameters'
    scp-schemas_ReadContractStateResponse:
      type: object
      properties:
        outputValues:
          type: array
          description: Output for the ABI interaction.
          items:
            $ref: '#/components/schemas/AnyValue'
    scp-schemas_ContractsResponse:
      type: object
      properties:
        contracts:
          type: array
          description: Contracts are all the contracts that match criteria.
          items:
            $ref: '#/components/schemas/scp-schemas_Contract'
    scp-schemas_PatchContractRequest:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/scp-schemas_ContractName'
        description:
          $ref: '#/components/schemas/ContractDescription'
        archived:
          $ref: '#/components/schemas/scp-schemas_Archived'
    TemplateParameters:
      type: object
      description: JSON object that contains the template deployment parameters used to initialize the contract(s) on-chain.
      additionalProperties:
        type: string
    TemplateContractDeploymentRequest:
      type: object
      required:
        - blockchain
        - entitySecretCiphertext
        - idempotencyKey
        - name
        - walletId
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/schemas_IdempotencyKey'
        blockchain:
          $ref: '#/components/schemas/scp-schemas_Blockchain'
        walletId:
          $ref: '#/components/schemas/schemas_WalletId'
        name:
          description: Name of the contract in your Circle console.
          maxLength: 100
          minLength: 1
          type: string
          example: My Template Contract
        description:
          description: Description of the contract.
          type: string
          example: My first template contract deployment!
        entitySecretCiphertext:
          $ref: '#/components/schemas/EntitySecretCiphertext'
        templateParameters:
          $ref: '#/components/schemas/TemplateParameters'
        feeLevel:
          $ref: '#/components/schemas/FeeLevel'
        gasLimit:
          $ref: '#/components/schemas/GasLimit'
        gasPrice:
          $ref: '#/components/schemas/GasPrice'
        maxFee:
          $ref: '#/components/schemas/MaxFee'
        priorityFee:
          $ref: '#/components/schemas/PriorityFee'
        refId:
          $ref: '#/components/schemas/RefId'
    TemplateContractDeploymentResponse:
      type: object
      properties:
        contractIds:
          type: array
          description: Unique identifiers of the created smart contracts.
          items:
            type: string
            format: uuid
        transactionId:
          description: Unique identifier of the pending deployment transaction. transaction.
          type: string
          format: uuid
    EstimateDeployContractByTemplateFeeRequest:
      type: object
      required:
        - blockchain
        - templateParameters
      properties:
        blockchain:
          $ref: '#/components/schemas/scp-schemas_Blockchain'
        sourceAddress:
          $ref: '#/components/schemas/SourceAddress'
        templateParameters:
          $ref: '#/components/schemas/TemplateParameters'
        walletId:
          $ref: '#/components/schemas/schemas_WalletId'
    EstimateDeployContractByTemplateFeeResponse:
      type: object
      properties:
        high:
          $ref: '#/components/schemas/EstimatedTransactionFee'
        low:
          $ref: '#/components/schemas/EstimatedTransactionFee'
        medium:
          $ref: '#/components/schemas/EstimatedTransactionFee'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: PREFIX:ID:SECRET
      description: Circle's API Keys are formatted in the following structure "PREFIX:ID:SECRET". All three parts are requred to make a successful request.
  headers:
    XRequestId:
      description: Universally unique identifier (UUID v4) for the request. Helpful for identifying a request when communicating with Circle support.
      schema:
        type: string
        format: uuid
        example: 2adba88e-9d63-44bc-b975-9b6ae3440dde
  parameters:
    From:
      name: from
      description: From is the start time of the query, inclusive
      in: query
      schema:
        type: string
        format: date-time
        example: '2023-01-01T12:04:05Z'
    To:
      name: to
      description: To is the end time of the query, inclusive, default to current time
      in: query
      schema:
        type: string
        format: date-time
        example: '2023-01-01T12:04:05Z'
    PageBefore:
      name: pageBefore
      description: PageBefore is used to return items before the given item exclusively. SHOULD NOT be used in conjunction with pageAfter
      in: query
      schema:
        type: string
        format: uuid
    PageAfter:
      name: pageAfter
      description: PageAfter is used to return items after the given item exclusively. SHOULD NOT be used in conjunction with pageBefore
      in: query
      schema:
        type: string
        format: uuid
    PageSize:
      name: pageSize
      description: PageSize is the number of items to return
      in: query
      schema:
        type: integer
        default: 10
        maximum: 50
        minimum: 1
    Blockchain:
      name: blockchain
      description: Filter by blockchain.
      in: query
      schema:
        enum:
          - ETH
          - ETH-GOERLI
          - AVAX
          - AVAX-FUJI
          - MATIC
          - MATIC-MUMBAI
        type: string
    parameters_From:
      name: from
      description: Queries items created since the specified date-time (inclusive).
      in: query
      schema:
        type: string
        format: date-time
        example: '2023-01-01T12:04:05Z'
    parameters_To:
      name: to
      description: Queries items created before the specified date-time (inclusive).
      in: query
      schema:
        type: string
        format: date-time
        example: '2023-01-01T12:04:05Z'
    parameters_PageBefore:
      name: pageBefore
      description: |
        A collection ID value used for pagination.

        It marks the exclusive end of a page. When provided, the collection resource will return the next n items before
        the id, with n being specified by pageSize.

        The items will be returned in the natural order of the collection.

        The resource will return the first page if neither pageAfter nor pageBefore are specified. 

        SHOULD NOT be used in conjuction with pageAfter.
      in: query
      schema:
        type: string
        format: uuid
    parameters_PageAfter:
      name: pageAfter
      description: |
        A collection ID value used for pagination.

        It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after
        the id, with n being specified by pageSize.

        The items will be returned in the natural order of the collection.

        The resource will return the first page if neither pageAfter nor pageBefore are specified.

        SHOULD NOT be used in conjuction with pageBefore.
      in: query
      schema:
        type: string
        format: uuid
    parameters_PageSize:
      name: pageSize
      description: |
        Limits the number of items to be returned.

         Some collections have a strict upper bound that will disregard this value. In case the specified value is higher
         than the allowed limit, the collection limit will be used.

         If avoided, the collection will determine the page size itself.
      in: query
      schema:
        type: integer
        default: 10
        maximum: 50
        minimum: 1
    WalletSetIdPath:
      description: WalletSet ID
      in: path
      name: id
      required: true
      schema:
        format: uuid
        type: string
    XUserToken:
      name: X-User-Token
      description: User token
      in: header
      schema:
        type: string
    Address:
      name: address
      description: Filter by the Address of the wallet.
      in: query
      schema:
        type: string
    WalletSetIdQuery:
      name: walletSetId
      description: Filter by the wallet set the wallet belongs to.
      in: query
      schema:
        format: uuid
        type: string
    IncludeAll:
      name: includeAll
      in: query
      required: false
      schema:
        type: boolean
        example: true
    Name:
      name: name
      description: Filter by token name.
      in: query
      schema:
        type: string
    TokenAddress:
      name: tokenAddress
      description: Filter by token addresses.
      in: query
      schema:
        type: string
    Standard:
      name: standard
      description: Filter by the token standard.
      in: query
      schema:
        type: string
    CustodyType:
      name: custodyType
      description: Filter by the custody type.
      in: query
      schema:
        enum:
          - DEVELOPER
          - ENDUSER
        type: string
    DestinationAddress:
      name: destinationAddress
      description: Filter by the destination address.
      in: query
      schema:
        type: string
    Operation:
      name: operation
      description: Filter by on the operation of the transaction.
      in: query
      schema:
        enum:
          - TRANSFER
          - CONTRACT_EXECUTION
          - CONTRACT_DEPLOYMENT
        type: string
    State:
      name: state
      description: Filter by  the state of the transaction.
      in: query
      schema:
        type: string
        enum:
          - INITIATED
          - PENDING_RISK_SCREENING
          - DENIED
          - QUEUED
          - SENT
          - CONFIRMED
          - COMPLETED
          - CANCELLED
          - FAILED
    TxHash:
      name: txHash
      description: Filter on the transaction hash of the transaction.
      in: query
      schema:
        type: string
    TxType:
      name: txType
      description: Filter by on the transaction type.
      in: query
      schema:
        enum:
          - INBOUND
          - OUTBOUND
        type: string
    WalletIds:
      name: walletIds
      description: Filter by the wallet IDs of the transaction.
      in: query
      schema:
        type: string
    PinStatus:
      name: pinStatus
      description: Filter by the PIN status of the wallet.
      in: query
      schema:
        type: string
        enum:
          - ENABLED
          - UNSET
          - LOCKED
    SecurityQuestionStatus:
      name: securityQuestionStatus
      description: Filter by the security question status of the wallet.
      in: query
      schema:
        type: string
        enum:
          - ENABLED
          - UNSET
          - LOCKED
    XUserTokenRequired:
      name: X-User-Token
      description: User token
      required: true
      in: header
      schema:
        type: string
    Status:
      description: Filter by external challenge status.
      in: query
      name: status
      schema:
        enum:
          - PENDING
          - IN_PROGRESS
        type: string
  responses:
    Default:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response
      headers:
        X-Request-Id:
          $ref: '#/components/headers/XRequestId'
