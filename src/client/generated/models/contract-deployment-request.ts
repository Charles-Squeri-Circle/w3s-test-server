/* tslint:disable */
/* eslint-disable */
/**
 * W3S
 * All W3S APIs
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import { CommonBlockchain } from './common-blockchain';
// May contain unused imports in some cases
// @ts-ignore
import { ModelFeeLevel } from './model-fee-level';

/**
 * 
 * @export
 * @interface ContractDeploymentRequest
 */
export interface ContractDeploymentRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net).
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'idempotencyKey': string;
    /**
     * The contract\'s name.
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'name': string;
    /**
     * The description for a contract.
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'description'?: string;
    /**
     * Unique identifier of the wallet that will deploy the contract.
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'walletId'?: string;
    /**
     * The contract\'s ABI in a JSON stringified format.
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'abiJson': string;
    /**
     * Bytecode of the contract being deployed
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'bytecode': string;
    /**
     * A base64 string expression of the entity secret ciphertext. The entity secret should be encrypted by the entity public key. Circle mandates that the entity secret ciphertext is unique for each API request. 
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'entitySecretCiphertext': string;
    /**
     * 
     * @type {CommonBlockchain}
     * @memberof ContractDeploymentRequest
     */
    'blockchain'?: CommonBlockchain;
    /**
     * A list of arguments to pass to the contract\'s constructor function. Must be an empty array if there are no constructor parameters.
     * @type {Array<any>}
     * @memberof ContractDeploymentRequest
     */
    'constructorParameters': Array<any>;
    /**
     * 
     * @type {ModelFeeLevel}
     * @memberof ContractDeploymentRequest
     */
    'feeLevel'?: ModelFeeLevel;
    /**
     * GasLimit is the limit on how much gas can be used in the transaction.
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'gasLimit'?: string;
    /**
     * GasPrice is the price per unit of gas for the transaction.
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'gasPrice'?: string;
    /**
     * MaxFee is the total amount willing to be paid per unit of gas for your transaction.
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'maxFee'?: string;
    /**
     * PriorityFee is an additional fee per unit of gas to incentivise validators to complete your transaction. faster.
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'priorityFee'?: string;
    /**
     * RefID is a custom label field.
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'refId'?: string;
}



