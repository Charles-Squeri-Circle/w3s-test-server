/* tslint:disable */
/* eslint-disable */
/**
 * W3S
 * All W3S APIs
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import { FeeLevel } from './fee-level';

/**
 * 
 * @export
 * @interface CreateContractExecutionTransactionForDeveloperRequest
 */
export interface CreateContractExecutionTransactionForDeveloperRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net).
     * @type {string}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'idempotencyKey': string;
    /**
     * The contract abi function signature to be interacted with in the smart contract. e.g. burn(uint256)
     * @type {string}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'abiFunctionSignature'?: string;
    /**
     * The parameters required by the contract abi function to perform the contract interaction. Supported types included string, integer, boolean, and array.
     * @type {Array<string>}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'abiParameters': Array<string>;
    /**
     * The blockchain address of the contract to be executed.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'contractAddress': string;
    /**
     * A base64 string expression of the entity secret ciphertext. The entity secret should be encrypted by the entity public key. Circle mandates that the entity secret ciphertext is unique for each API request. 
     * @type {string}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'entitySecretCiphertext': string;
    /**
     * 
     * @type {FeeLevel}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'feeLevel'?: FeeLevel;
    /**
     * The maximum units of gas to be used for the transaction. Required if `feeLevel` is not provided. Estimates for this limit can be obtained through the estimate fee API call. 
     * @type {string}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'gasLimit'?: string;
    /**
     * For blockchains with EIP-1559 support, the maximum price of gas, in gwei, to be used per each unit of gas (see `gasLimit`). Requires `gasLimit`. Cannot be used with `feeLevel`, `baseFee`, `priorityFee`, or `maxFee`. Estimates for this fee can be obtained through the estimate fee API call. 
     * @type {string}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'gasPrice'?: string;
    /**
     * The maximum price per unit of gas (see `gasLimit`), in gwei. Requires `baseFee`, `priorityFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`. Estimates for this fee can be obtained through the estimate fee API call. 
     * @type {string}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'maxFee'?: string;
    /**
     * The “tip”, in gwei, to be added to the baseFee as an incentive for validators. Requires `baseFee`, `maxFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`. Estimates for this fee can be obtained through the estimate fee API call. 
     * @type {string}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'priorityFee'?: string;
    /**
     * Optional reference or description used to identify the transaction.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'refId'?: string;
    /**
     * Unique system generated identifier of the wallet. Required when source Address and blockchain is not provided. Mutually exclusive
     * @type {string}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'walletId': string;
}



