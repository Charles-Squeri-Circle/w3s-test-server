/* tslint:disable */
/* eslint-disable */
/**
 * W3S
 * All W3S APIs
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import { FeeLevel } from './fee-level';

/**
 * 
 * @export
 * @interface ContractExecutionTxnPinCodeRequest
 */
export interface ContractExecutionTxnPinCodeRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net).
     * @type {string}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'idempotencyKey': string;
    /**
     * The contract ABI function signature or `callData` field is required for interacting with the smart contract. The ABI function signature cannot be used simultaneously with `callData`. e.g. burn(uint256)
     * @type {string}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'abiFunctionSignature'?: string;
    /**
     * The contract ABI function signature parameters for executing the contract interaction. Supported parameter types include string, integer, boolean, and array. These parameters should be used exclusively with the abiFunctionSignature and cannot be used with `callData`.
     * @type {Array<string>}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'abiParameters'?: Array<string>;
    /**
     * The raw transaction data, must be an even-length hexadecimal string with the `0x` prefix, to be executed. It is important to note that the usage of `callData` is mutually exclusive with the `abiFunctionSignature` and `abiParameters`. Therefore, `callData` cannot be utilized simultaneously with either `abiFunctionSignature` or `abiParameters`.
     * @type {string}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'callData'?: string;
    /**
     * The amount of native token that will be sent to the contract abi execution. Optional field for payable api only, if not provided, no native token will be sent.
     * @type {string}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'amount'?: string;
    /**
     * The blockchain address of the contract to be executed.
     * @type {string}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'contractAddress': string;
    /**
     * 
     * @type {FeeLevel}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'feeLevel'?: FeeLevel;
    /**
     * The maximum units of gas to be used for the transaction. Required if `feeLevel` is not provided. Estimates for this limit can be obtained through the estimate fee API call. 
     * @type {string}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'gasLimit'?: string;
    /**
     * For blockchains with EIP-1559 support, the maximum price of gas, in gwei, to be used per each unit of gas (see `gasLimit`). Requires `gasLimit`. Cannot be used with `feeLevel`, `baseFee`, `priorityFee`, or `maxFee`. Estimates for this fee can be obtained through the estimate fee API call. 
     * @type {string}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'gasPrice'?: string;
    /**
     * The maximum price per unit of gas (see `gasLimit`), in gwei. Requires `baseFee`, `priorityFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`. Estimates for this fee can be obtained through the estimate fee API call. 
     * @type {string}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'maxFee'?: string;
    /**
     * The “tip”, in gwei, to be added to the baseFee as an incentive for validators. Requires `baseFee`, `maxFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`. Estimates for this fee can be obtained through the estimate fee API call. 
     * @type {string}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'priorityFee'?: string;
    /**
     * Optional reference or description used to identify the transaction.
     * @type {string}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'refId'?: string;
    /**
     * Unique system generated identifier of the wallet. Required when source Address and blockchain is not provided. Mutually exclusive. For contract deploys this wallet ID will be used as the source.
     * @type {string}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'walletId': string;
}



