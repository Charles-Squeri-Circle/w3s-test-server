/* tslint:disable */
/* eslint-disable */
/**
 * W3S
 * All W3S APIs
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ReadContract200Response } from '../models';
// @ts-ignore
import { ScpSchemasReadContractStateRequest } from '../models';
/**
 * InteractApi - axios parameter creator
 * @export
 */
export const InteractApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Read the state of a contract you\'ve imported or deployed by providing the ABI function and applicable parameters.
         * @summary Execute a read function on a contract
         * @param {string} id Contract id
         * @param {ScpSchemasReadContractStateRequest} scpSchemasReadContractStateRequest Read contract state by executing a read ABI function.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readContract: async (id: string, scpSchemasReadContractStateRequest: ScpSchemasReadContractStateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('readContract', 'id', id)
            // verify required parameter 'scpSchemasReadContractStateRequest' is not null or undefined
            assertParamExists('readContract', 'scpSchemasReadContractStateRequest', scpSchemasReadContractStateRequest)
            const localVarPath = `/contracts/{id}/read`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scpSchemasReadContractStateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InteractApi - functional programming interface
 * @export
 */
export const InteractApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InteractApiAxiosParamCreator(configuration)
    return {
        /**
         * Read the state of a contract you\'ve imported or deployed by providing the ABI function and applicable parameters.
         * @summary Execute a read function on a contract
         * @param {string} id Contract id
         * @param {ScpSchemasReadContractStateRequest} scpSchemasReadContractStateRequest Read contract state by executing a read ABI function.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readContract(id: string, scpSchemasReadContractStateRequest: ScpSchemasReadContractStateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReadContract200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readContract(id, scpSchemasReadContractStateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InteractApi - factory interface
 * @export
 */
export const InteractApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InteractApiFp(configuration)
    return {
        /**
         * Read the state of a contract you\'ve imported or deployed by providing the ABI function and applicable parameters.
         * @summary Execute a read function on a contract
         * @param {string} id Contract id
         * @param {ScpSchemasReadContractStateRequest} scpSchemasReadContractStateRequest Read contract state by executing a read ABI function.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readContract(id: string, scpSchemasReadContractStateRequest: ScpSchemasReadContractStateRequest, options?: any): AxiosPromise<ReadContract200Response> {
            return localVarFp.readContract(id, scpSchemasReadContractStateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InteractApi - object-oriented interface
 * @export
 * @class InteractApi
 * @extends {BaseAPI}
 */
export class InteractApi extends BaseAPI {
    /**
     * Read the state of a contract you\'ve imported or deployed by providing the ABI function and applicable parameters.
     * @summary Execute a read function on a contract
     * @param {string} id Contract id
     * @param {ScpSchemasReadContractStateRequest} scpSchemasReadContractStateRequest Read contract state by executing a read ABI function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InteractApi
     */
    public readContract(id: string, scpSchemasReadContractStateRequest: ScpSchemasReadContractStateRequest, options?: AxiosRequestConfig) {
        return InteractApiFp(this.configuration).readContract(id, scpSchemasReadContractStateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

