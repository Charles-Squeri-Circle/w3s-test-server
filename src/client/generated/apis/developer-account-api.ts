/* tslint:disable */
/* eslint-disable */
/**
 * W3S
 * All W3S APIs
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetEntityConfig200Response } from '../models';
// @ts-ignore
import { GetPublicKey200Response } from '../models';
/**
 * DeveloperAccountApi - axios parameter creator
 * @export
 */
export const DeveloperAccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the app ID associated to the entity.
         * @summary Get configuration for entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityConfig: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/config/entity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the public key associated with the entity.
         * @summary Get public key for entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicKey: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/config/entity/publicKey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeveloperAccountApi - functional programming interface
 * @export
 */
export const DeveloperAccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeveloperAccountApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the app ID associated to the entity.
         * @summary Get configuration for entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityConfig(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEntityConfig200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityConfig(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the public key associated with the entity.
         * @summary Get public key for entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicKey(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPublicKey200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicKey(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeveloperAccountApi - factory interface
 * @export
 */
export const DeveloperAccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeveloperAccountApiFp(configuration)
    return {
        /**
         * Get the app ID associated to the entity.
         * @summary Get configuration for entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityConfig(options?: any): AxiosPromise<GetEntityConfig200Response> {
            return localVarFp.getEntityConfig(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the public key associated with the entity.
         * @summary Get public key for entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicKey(options?: any): AxiosPromise<GetPublicKey200Response> {
            return localVarFp.getPublicKey(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeveloperAccountApi - object-oriented interface
 * @export
 * @class DeveloperAccountApi
 * @extends {BaseAPI}
 */
export class DeveloperAccountApi extends BaseAPI {
    /**
     * Get the app ID associated to the entity.
     * @summary Get configuration for entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeveloperAccountApi
     */
    public getEntityConfig(options?: AxiosRequestConfig) {
        return DeveloperAccountApiFp(this.configuration).getEntityConfig(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the public key associated with the entity.
     * @summary Get public key for entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeveloperAccountApi
     */
    public getPublicKey(options?: AxiosRequestConfig) {
        return DeveloperAccountApiFp(this.configuration).getPublicKey(options).then((request) => request(this.axios, this.basePath));
    }
}

