/* tslint:disable */
/* eslint-disable */
/**
 * W3S
 * All W3S APIs
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeployContract200Response } from '../models';
// @ts-ignore
import { EstimateContractDeploy200Response } from '../models';
// @ts-ignore
import { ImportContract200Response } from '../models';
// @ts-ignore
import { ScpSchemasContractDeploymentEstimateFeeRequest } from '../models';
// @ts-ignore
import { ScpSchemasContractDeploymentRequest } from '../models';
// @ts-ignore
import { ScpSchemasImportContractRequest } from '../models';
/**
 * DeployImportApi - axios parameter creator
 * @export
 */
export const DeployImportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deploy a smart contract on a specified blockchain using the contract\'s ABI and bytecode. The deployment will originate from one of your Circle Programmable Wallets.
         * @summary Deploy a contract
         * @param {ScpSchemasContractDeploymentRequest} scpSchemasContractDeploymentRequest Deploy contract request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployContract: async (scpSchemasContractDeploymentRequest: ScpSchemasContractDeploymentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scpSchemasContractDeploymentRequest' is not null or undefined
            assertParamExists('deployContract', 'scpSchemasContractDeploymentRequest', scpSchemasContractDeploymentRequest)
            const localVarPath = `/contracts/deploy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scpSchemasContractDeploymentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Estimate the network fee for deploying a smart contract on a specified blockchain, given the contract bytecode.
         * @summary Estimate a contract deployment
         * @param {ScpSchemasContractDeploymentEstimateFeeRequest} scpSchemasContractDeploymentEstimateFeeRequest Estimate a transaction fee for deploying a smart contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        estimateContractDeploy: async (scpSchemasContractDeploymentEstimateFeeRequest: ScpSchemasContractDeploymentEstimateFeeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scpSchemasContractDeploymentEstimateFeeRequest' is not null or undefined
            assertParamExists('estimateContractDeploy', 'scpSchemasContractDeploymentEstimateFeeRequest', scpSchemasContractDeploymentEstimateFeeRequest)
            const localVarPath = `/contracts/deploy/estimateFee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scpSchemasContractDeploymentEstimateFeeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add an existing smart contract to your library of contracts. It also can be done in the Web3 Services Console.
         * @summary Import a contract
         * @param {ScpSchemasImportContractRequest} scpSchemasImportContractRequest Import contract request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importContract: async (scpSchemasImportContractRequest: ScpSchemasImportContractRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scpSchemasImportContractRequest' is not null or undefined
            assertParamExists('importContract', 'scpSchemasImportContractRequest', scpSchemasImportContractRequest)
            const localVarPath = `/contracts/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scpSchemasImportContractRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeployImportApi - functional programming interface
 * @export
 */
export const DeployImportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeployImportApiAxiosParamCreator(configuration)
    return {
        /**
         * Deploy a smart contract on a specified blockchain using the contract\'s ABI and bytecode. The deployment will originate from one of your Circle Programmable Wallets.
         * @summary Deploy a contract
         * @param {ScpSchemasContractDeploymentRequest} scpSchemasContractDeploymentRequest Deploy contract request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deployContract(scpSchemasContractDeploymentRequest: ScpSchemasContractDeploymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeployContract200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deployContract(scpSchemasContractDeploymentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Estimate the network fee for deploying a smart contract on a specified blockchain, given the contract bytecode.
         * @summary Estimate a contract deployment
         * @param {ScpSchemasContractDeploymentEstimateFeeRequest} scpSchemasContractDeploymentEstimateFeeRequest Estimate a transaction fee for deploying a smart contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async estimateContractDeploy(scpSchemasContractDeploymentEstimateFeeRequest: ScpSchemasContractDeploymentEstimateFeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EstimateContractDeploy200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.estimateContractDeploy(scpSchemasContractDeploymentEstimateFeeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add an existing smart contract to your library of contracts. It also can be done in the Web3 Services Console.
         * @summary Import a contract
         * @param {ScpSchemasImportContractRequest} scpSchemasImportContractRequest Import contract request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importContract(scpSchemasImportContractRequest: ScpSchemasImportContractRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImportContract200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importContract(scpSchemasImportContractRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeployImportApi - factory interface
 * @export
 */
export const DeployImportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeployImportApiFp(configuration)
    return {
        /**
         * Deploy a smart contract on a specified blockchain using the contract\'s ABI and bytecode. The deployment will originate from one of your Circle Programmable Wallets.
         * @summary Deploy a contract
         * @param {ScpSchemasContractDeploymentRequest} scpSchemasContractDeploymentRequest Deploy contract request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployContract(scpSchemasContractDeploymentRequest: ScpSchemasContractDeploymentRequest, options?: any): AxiosPromise<DeployContract200Response> {
            return localVarFp.deployContract(scpSchemasContractDeploymentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Estimate the network fee for deploying a smart contract on a specified blockchain, given the contract bytecode.
         * @summary Estimate a contract deployment
         * @param {ScpSchemasContractDeploymentEstimateFeeRequest} scpSchemasContractDeploymentEstimateFeeRequest Estimate a transaction fee for deploying a smart contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        estimateContractDeploy(scpSchemasContractDeploymentEstimateFeeRequest: ScpSchemasContractDeploymentEstimateFeeRequest, options?: any): AxiosPromise<EstimateContractDeploy200Response> {
            return localVarFp.estimateContractDeploy(scpSchemasContractDeploymentEstimateFeeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an existing smart contract to your library of contracts. It also can be done in the Web3 Services Console.
         * @summary Import a contract
         * @param {ScpSchemasImportContractRequest} scpSchemasImportContractRequest Import contract request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importContract(scpSchemasImportContractRequest: ScpSchemasImportContractRequest, options?: any): AxiosPromise<ImportContract200Response> {
            return localVarFp.importContract(scpSchemasImportContractRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeployImportApi - object-oriented interface
 * @export
 * @class DeployImportApi
 * @extends {BaseAPI}
 */
export class DeployImportApi extends BaseAPI {
    /**
     * Deploy a smart contract on a specified blockchain using the contract\'s ABI and bytecode. The deployment will originate from one of your Circle Programmable Wallets.
     * @summary Deploy a contract
     * @param {ScpSchemasContractDeploymentRequest} scpSchemasContractDeploymentRequest Deploy contract request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployImportApi
     */
    public deployContract(scpSchemasContractDeploymentRequest: ScpSchemasContractDeploymentRequest, options?: AxiosRequestConfig) {
        return DeployImportApiFp(this.configuration).deployContract(scpSchemasContractDeploymentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Estimate the network fee for deploying a smart contract on a specified blockchain, given the contract bytecode.
     * @summary Estimate a contract deployment
     * @param {ScpSchemasContractDeploymentEstimateFeeRequest} scpSchemasContractDeploymentEstimateFeeRequest Estimate a transaction fee for deploying a smart contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployImportApi
     */
    public estimateContractDeploy(scpSchemasContractDeploymentEstimateFeeRequest: ScpSchemasContractDeploymentEstimateFeeRequest, options?: AxiosRequestConfig) {
        return DeployImportApiFp(this.configuration).estimateContractDeploy(scpSchemasContractDeploymentEstimateFeeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add an existing smart contract to your library of contracts. It also can be done in the Web3 Services Console.
     * @summary Import a contract
     * @param {ScpSchemasImportContractRequest} scpSchemasImportContractRequest Import contract request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployImportApi
     */
    public importContract(scpSchemasImportContractRequest: ScpSchemasImportContractRequest, options?: AxiosRequestConfig) {
        return DeployImportApiFp(this.configuration).importContract(scpSchemasImportContractRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

